<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="originalContent" value="# syntax=docker/dockerfile:1&#10;FROM maven:3.9-eclipse-temurin-17 AS build&#10;WORKDIR /app&#10;COPY pom.xml .&#10;RUN mvn -q -e -DskipTests dependency:go-offline&#10;COPY src ./src&#10;RUN mvn -q -DskipTests package&#10;&#10;FROM eclipse-temurin:17-jre&#10;WORKDIR /app&#10;COPY --from=build /app/target/moviebooking-backend-0.0.1-SNAPSHOT.jar app.jar&#10;EXPOSE 8080&#10;ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app/app.jar&quot;] " />
              <option name="updatedContent" value="# syntax=docker/dockerfile:1&#10;FROM maven:3.9-eclipse-temurin-17 AS build&#10;WORKDIR /app&#10;COPY pom.xml .&#10;RUN mvn -q -e -DskipTests dependency:go-offline&#10;COPY src ./src&#10;RUN mvn -q -DskipTests package&#10;&#10;FROM eclipse-temurin:17-jre&#10;WORKDIR /app&#10;COPY --from=build /app/target/moviebooking-backend-0.0.1-SNAPSHOT.jar app.jar&#10;EXPOSE 8080&#10;ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app/app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# Movie Theater Booking Application&#10;&#10;This is a movie theater booking application built with Spring Boot and containerized using Docker.&#10;&#10;## Prerequisites&#10;&#10;- Docker installed on your machine&#10;- Docker Compose (optional, for running with dependent services)&#10;&#10;## Building and Running with Docker&#10;&#10;### 1. Build the Docker Image&#10;&#10;```bash&#10;docker build -t movie-theater-app .&#10;```&#10;&#10;### 2. Run the Container&#10;&#10;```bash&#10;docker run -d -p 8080:8080 --name movie-theater movie-theater-app&#10;```&#10;&#10;The application will be available at `http://localhost:8080`&#10;&#10;### Environment Variables&#10;&#10;The following environment variables can be configured when running the container:&#10;&#10;```bash&#10;docker run -d \&#10;  -p 8080:8080 \&#10;  -e SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092 \&#10;  -e SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/moviedb \&#10;  --name movie-theater \&#10;  movie-theater-app&#10;```&#10;&#10;## Docker Compose (Recommended)&#10;&#10;Create a `docker-compose.yml` file to run the application with all its dependencies (MongoDB, Kafka, etc.).&#10;&#10;```yaml&#10;version: '3.8'&#10;services:&#10;  app:&#10;    build: .&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    environment:&#10;      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092&#10;      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/moviedb&#10;    depends_on:&#10;      - mongodb&#10;      - kafka&#10;&#10;  mongodb:&#10;    image: mongo:latest&#10;    ports:&#10;      - &quot;27017:27017&quot;&#10;    volumes:&#10;      - mongodb_data:/data/db&#10;&#10;  zookeeper:&#10;    image: confluentinc/cp-zookeeper:latest&#10;    environment:&#10;      ZOOKEEPER_CLIENT_PORT: 2181&#10;      ZOOKEEPER_TICK_TIME: 2000&#10;&#10;  kafka:&#10;    image: confluentinc/cp-kafka:latest&#10;    depends_on:&#10;      - zookeeper&#10;    ports:&#10;      - &quot;9092:9092&quot;&#10;    environment:&#10;      KAFKA_BROKER_ID: 1&#10;      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181&#10;      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092&#10;      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1&#10;&#10;volumes:&#10;  mongodb_data:&#10;```&#10;&#10;### Running with Docker Compose&#10;&#10;1. Start all services:&#10;```bash&#10;docker-compose up -d&#10;```&#10;&#10;2. Stop all services:&#10;```bash&#10;docker-compose down&#10;```&#10;&#10;## Container Management&#10;&#10;### View Logs&#10;```bash&#10;docker logs movie-theater&#10;```&#10;&#10;### Stop Container&#10;```bash&#10;docker stop movie-theater&#10;```&#10;&#10;### Remove Container&#10;```bash&#10;docker rm movie-theater&#10;```&#10;&#10;### Remove Image&#10;```bash&#10;docker rmi movie-theater-app&#10;```&#10;&#10;## Troubleshooting&#10;&#10;1. If the application fails to start, check the logs:&#10;```bash&#10;docker logs movie-theater&#10;```&#10;&#10;2. To check if the container is running:&#10;```bash&#10;docker ps&#10;```&#10;&#10;3. To check resource usage:&#10;```bash&#10;docker stats movie-theater&#10;```" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="version: '3.8'&#10;services:&#10;  app:&#10;    build: .&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    environment:&#10;      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/moviebooking?createDatabaseIfNotExist=true&amp;allowPublicKeyRetrieval=true&amp;useSSL=false&amp;serverTimezone=UTC&#10;      - SPRING_DATASOURCE_USERNAME=root&#10;      - SPRING_DATASOURCE_PASSWORD=root&#10;      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092&#10;    depends_on:&#10;      - mysql&#10;      - kafka&#10;&#10;  mysql:&#10;    image: mysql:8.0&#10;    ports:&#10;      - &quot;3306:3306&quot;&#10;    environment:&#10;      - MYSQL_ROOT_PASSWORD=root&#10;      - MYSQL_DATABASE=moviebooking&#10;    volumes:&#10;      - mysql_data:/var/lib/mysql&#10;&#10;  zookeeper:&#10;    image: confluentinc/cp-zookeeper:7.3.2&#10;    environment:&#10;      ZOOKEEPER_CLIENT_PORT: 2181&#10;      ZOOKEEPER_SERVER_ID: 1&#10;      ZOOKEEPER_SERVERS: zookeeper:2888:3888&#10;    ports:&#10;      - &quot;2181:2181&quot;&#10;&#10;  kafka:&#10;    image: confluentinc/cp-kafka:7.3.2&#10;    depends_on:&#10;      - zookeeper&#10;    ports:&#10;      - &quot;9092:9092&quot;&#10;    environment:&#10;      KAFKA_BROKER_ID: 1&#10;      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181&#10;      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT&#10;      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092&#10;      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1&#10;      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0&#10;      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT&#10;      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092&#10;&#10;volumes:&#10;  mysql_data:&#10;" />
              <option name="updatedContent" value="version: '3.8'&#10;services:&#10;  app:&#10;    build: .&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    environment:&#10;      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/moviebooking?createDatabaseIfNotExist=true&amp;allowPublicKeyRetrieval=true&amp;useSSL=false&amp;serverTimezone=UTC&#10;      - SPRING_DATASOURCE_USERNAME=root&#10;      - SPRING_DATASOURCE_PASSWORD=root&#10;      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092&#10;    depends_on:&#10;      - mysql&#10;      - kafka&#10;&#10;  mysql:&#10;    image: mysql:8.0&#10;    ports:&#10;      - &quot;3306:3306&quot;&#10;    environment:&#10;      - MYSQL_ROOT_PASSWORD=root&#10;      - MYSQL_DATABASE=moviebooking&#10;    volumes:&#10;      - mysql_data:/var/lib/mysql&#10;&#10;  zookeeper:&#10;    image: confluentinc/cp-zookeeper:7.3.2&#10;    container_name: zookeeper&#10;    environment:&#10;      ZOOKEEPER_CLIENT_PORT: 2181&#10;      ZOOKEEPER_SERVER_ID: 1&#10;      ZOOKEEPER_SERVERS: zookeeper:2888:3888&#10;    ports:&#10;      - &quot;2181:2181&quot;&#10;&#10;  kafka:&#10;    image: confluentinc/cp-kafka:7.3.2&#10;    container_name: kafka&#10;    ports:&#10;      - &quot;9092:9092&quot;&#10;      - &quot;29092:29092&quot;&#10;    environment:&#10;      KAFKA_BROKER_ID: 1&#10;      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181&#10;      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092&#10;      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT&#10;      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT&#10;      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1&#10;      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0&#10;      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1&#10;      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1&#10;    depends_on:&#10;      - zookeeper&#10;&#10;volumes:&#10;  mysql_data:" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/endpoints.har">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/endpoints.har" />
              <option name="updatedContent" value="{&#10;  &quot;log&quot;: {&#10;    &quot;version&quot;: &quot;1.2&quot;,&#10;    &quot;creator&quot;: {&#10;      &quot;name&quot;: &quot;Movie Booking API Tests&quot;,&#10;      &quot;version&quot;: &quot;1.0&quot;&#10;    },&#10;    &quot;entries&quot;: [&#10;      {&#10;        &quot;request&quot;: {&#10;          &quot;method&quot;: &quot;GET&quot;,&#10;          &quot;url&quot;: &quot;http://localhost:8080/api/v1.0/moviebooking/all&quot;,&#10;          &quot;headers&quot;: [&#10;            {&#10;              &quot;name&quot;: &quot;Accept&quot;,&#10;              &quot;value&quot;: &quot;application/json&quot;&#10;            }&#10;          ]&#10;        },&#10;        &quot;comment&quot;: &quot;Get all movies&quot;&#10;      },&#10;      {&#10;        &quot;request&quot;: {&#10;          &quot;method&quot;: &quot;GET&quot;,&#10;          &quot;url&quot;: &quot;http://localhost:8080/api/v1.0/moviebooking/movies/search/Inception&quot;,&#10;          &quot;headers&quot;: [&#10;            {&#10;              &quot;name&quot;: &quot;Accept&quot;,&#10;              &quot;value&quot;: &quot;application/json&quot;&#10;            }&#10;          ]&#10;        },&#10;        &quot;comment&quot;: &quot;Search movies by name&quot;&#10;      },&#10;      {&#10;        &quot;request&quot;: {&#10;          &quot;method&quot;: &quot;POST&quot;,&#10;          &quot;url&quot;: &quot;http://localhost:8080/api/v1.0/moviebooking/Inception/add&quot;,&#10;          &quot;headers&quot;: [&#10;            {&#10;              &quot;name&quot;: &quot;Content-Type&quot;,&#10;              &quot;value&quot;: &quot;application/json&quot;&#10;            }&#10;          ],&#10;          &quot;postData&quot;: {&#10;            &quot;mimeType&quot;: &quot;application/json&quot;,&#10;            &quot;text&quot;: {&#10;              &quot;theatreName&quot;: &quot;PVR&quot;,&#10;              &quot;numberOfTickets&quot;: 2,&#10;              &quot;seatNumbers&quot;: [&quot;A1&quot;, &quot;A2&quot;],&#10;              &quot;userLoginId&quot;: &quot;user123&quot;&#10;            }&#10;          }&#10;        },&#10;        &quot;comment&quot;: &quot;Book tickets for a movie&quot;&#10;      },&#10;      {&#10;        &quot;request&quot;: {&#10;          &quot;method&quot;: &quot;PATCH&quot;,&#10;          &quot;url&quot;: &quot;http://localhost:8080/api/v1.0/moviebooking/Inception/theatres/PVR/tickets?total=50&quot;,&#10;          &quot;headers&quot;: [&#10;            {&#10;              &quot;name&quot;: &quot;Accept&quot;,&#10;              &quot;value&quot;: &quot;application/json&quot;&#10;            }&#10;          ]&#10;        },&#10;        &quot;comment&quot;: &quot;Update available tickets&quot;&#10;      },&#10;      {&#10;        &quot;request&quot;: {&#10;          &quot;method&quot;: &quot;GET&quot;,&#10;          &quot;url&quot;: &quot;http://localhost:8080/api/v1.0/moviebooking/Inception/booked/PVR&quot;,&#10;          &quot;headers&quot;: [&#10;            {&#10;              &quot;name&quot;: &quot;Accept&quot;,&#10;              &quot;value&quot;: &quot;application/json&quot;&#10;            }&#10;          ]&#10;        },&#10;        &quot;comment&quot;: &quot;Get booked tickets info&quot;&#10;      },&#10;      {&#10;        &quot;request&quot;: {&#10;          &quot;method&quot;: &quot;POST&quot;,&#10;          &quot;url&quot;: &quot;http://localhost:8080/api/v1.0/moviebooking/register&quot;,&#10;          &quot;headers&quot;: [&#10;            {&#10;              &quot;name&quot;: &quot;Content-Type&quot;,&#10;              &quot;value&quot;: &quot;application/json&quot;&#10;            }&#10;          ],&#10;          &quot;postData&quot;: {&#10;            &quot;mimeType&quot;: &quot;application/json&quot;,&#10;            &quot;text&quot;: {&#10;              &quot;firstName&quot;: &quot;John&quot;,&#10;              &quot;lastName&quot;: &quot;Doe&quot;,&#10;              &quot;email&quot;: &quot;john.doe@example.com&quot;,&#10;              &quot;loginId&quot;: &quot;johndoe&quot;,&#10;              &quot;password&quot;: &quot;Password123!&quot;,&#10;              &quot;confirmPassword&quot;: &quot;Password123!&quot;,&#10;              &quot;contactNumber&quot;: &quot;1234567890&quot;&#10;            }&#10;          }&#10;        },&#10;        &quot;comment&quot;: &quot;Register new user&quot;&#10;      },&#10;      {&#10;        &quot;request&quot;: {&#10;          &quot;method&quot;: &quot;POST&quot;,&#10;          &quot;url&quot;: &quot;http://localhost:8080/api/v1.0/moviebooking/login&quot;,&#10;          &quot;headers&quot;: [&#10;            {&#10;              &quot;name&quot;: &quot;Content-Type&quot;,&#10;              &quot;value&quot;: &quot;application/json&quot;&#10;            }&#10;          ],&#10;          &quot;postData&quot;: {&#10;            &quot;mimeType&quot;: &quot;application/json&quot;,&#10;            &quot;text&quot;: {&#10;              &quot;loginId&quot;: &quot;johndoe&quot;,&#10;              &quot;password&quot;: &quot;Password123!&quot;&#10;            }&#10;          }&#10;        },&#10;        &quot;comment&quot;: &quot;User login&quot;&#10;      },&#10;      {&#10;        &quot;request&quot;: {&#10;          &quot;method&quot;: &quot;POST&quot;,&#10;          &quot;url&quot;: &quot;http://localhost:8080/api/v1.0/moviebooking/Inception/add&quot;,&#10;          &quot;headers&quot;: [&#10;            {&#10;              &quot;name&quot;: &quot;Content-Type&quot;,&#10;              &quot;value&quot;: &quot;application/json&quot;&#10;            }&#10;          ],&#10;          &quot;postData&quot;: {&#10;            &quot;mimeType&quot;: &quot;application/json&quot;,&#10;            &quot;text&quot;: {&#10;              &quot;movieName&quot;: &quot;Inception&quot;,&#10;              &quot;theatreName&quot;: &quot;INOX&quot;,&#10;              &quot;totalTickets&quot;: 100,&#10;              &quot;status&quot;: &quot;BOOK ASAP&quot;&#10;            }&#10;          }&#10;        },&#10;        &quot;comment&quot;: &quot;Add new movie (Admin)&quot;&#10;      },&#10;      {&#10;        &quot;request&quot;: {&#10;          &quot;method&quot;: &quot;DELETE&quot;,&#10;          &quot;url&quot;: &quot;http://localhost:8080/api/v1.0/moviebooking/Inception/delete/INOX&quot;,&#10;          &quot;headers&quot;: [&#10;            {&#10;              &quot;name&quot;: &quot;Accept&quot;,&#10;              &quot;value&quot;: &quot;application/json&quot;&#10;            }&#10;          ]&#10;        },&#10;        &quot;comment&quot;: &quot;Delete movie (Admin)&quot;&#10;      },&#10;      {&#10;        &quot;request&quot;: {&#10;          &quot;method&quot;: &quot;PUT&quot;,&#10;          &quot;url&quot;: &quot;http://localhost:8080/api/v1.0/moviebooking/forgot&quot;,&#10;          &quot;headers&quot;: [&#10;            {&#10;              &quot;name&quot;: &quot;Content-Type&quot;,&#10;              &quot;value&quot;: &quot;application/json&quot;&#10;            }&#10;          ],&#10;          &quot;postData&quot;: {&#10;            &quot;mimeType&quot;: &quot;application/json&quot;,&#10;            &quot;text&quot;: {&#10;              &quot;loginId&quot;: &quot;johndoe&quot;,&#10;              &quot;password&quot;: &quot;NewPassword123!&quot;,&#10;              &quot;confirmPassword&quot;: &quot;NewPassword123!&quot;&#10;            }&#10;          }&#10;        },&#10;        &quot;comment&quot;: &quot;Reset password&quot;&#10;      }&#10;    ]&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;  &lt;groupId&gt;com.moviebookingapp&lt;/groupId&gt;&#10;  &lt;artifactId&gt;moviebooking-backend&lt;/artifactId&gt;&#10;  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;  &lt;name&gt;moviebooking-backend&lt;/name&gt;&#10;  &lt;description&gt;Movie Booking App Backend (Spring Boot, MySQL, Kafka, Logging, Monitoring)&lt;/description&gt;&#10;  &#10;  &lt;properties&gt;&#10;    &lt;java.version&gt;17&lt;/java.version&gt;&#10;    &lt;spring-boot.version&gt;3.1.2&lt;/spring-boot.version&gt;&#10;    &lt;lombok.version&gt;1.18.28&lt;/lombok.version&gt;&#10;    &lt;logstash.encoder.version&gt;7.4&lt;/logstash.encoder.version&gt;&#10;    &lt;logback.kafka.appender.version&gt;0.1.0&lt;/logback.kafka.appender.version&gt;&#10;    &lt;spring-kafka.version&gt;3.0.9&lt;/spring-kafka.version&gt;&#10;    &lt;maven.compiler.release&gt;${java.version}&lt;/maven.compiler.release&gt;&#10;    &lt;spring-boot-maven-plugin.version&gt;3.1.2&lt;/spring-boot-maven-plugin.version&gt;&#10;    &lt;maven-jar-plugin.version&gt;3.3.0&lt;/maven-jar-plugin.version&gt;&#10;    &lt;maven-site-plugin.version&gt;4.0.0-M13&lt;/maven-site-plugin.version&gt;&#10;    &lt;maven-surefire-plugin.version&gt;3.2.5&lt;/maven-surefire-plugin.version&gt;&#10;    &lt;maven-compiler-plugin.version&gt;3.11.0&lt;/maven-compiler-plugin.version&gt;&#10;    &lt;jacoco.version&gt;0.8.10&lt;/jacoco.version&gt;&#10;    &lt;jacoco.coverage.minimum&gt;0.80&lt;/jacoco.coverage.minimum&gt;&#10;  &lt;/properties&gt;&#10;&#10;  &lt;dependencyManagement&gt;&#10;    &lt;dependencies&gt;&#10;      &lt;dependency&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;&#10;        &lt;version&gt;${spring-boot.version}&lt;/version&gt;&#10;        &lt;type&gt;pom&lt;/type&gt;&#10;        &lt;scope&gt;import&lt;/scope&gt;&#10;      &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;  &lt;/dependencyManagement&gt;&#10;&#10;  &lt;dependencies&gt;&#10;    &lt;!-- Spring Boot starters --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;io.rest-assured&lt;/groupId&gt;&#10;      &lt;artifactId&gt;rest-assured&lt;/artifactId&gt;&#10;      &lt;version&gt;5.3.2&lt;/version&gt;&#10;      &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Database driver: MySQL --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;com.mysql&lt;/groupId&gt;&#10;      &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;&#10;      &lt;scope&gt;runtime&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Kafka --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Security crypto for password hashing --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-security-crypto&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Lombok --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;      &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;      &lt;version&gt;${lombok.version}&lt;/version&gt;&#10;      &lt;scope&gt;provided&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Logging to Kafka and Logstash JSON --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;net.logstash.logback&lt;/groupId&gt;&#10;      &lt;artifactId&gt;logstash-logback-encoder&lt;/artifactId&gt;&#10;      &lt;version&gt;${logstash.encoder.version}&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;com.github.danielwegener&lt;/groupId&gt;&#10;      &lt;artifactId&gt;logback-kafka-appender&lt;/artifactId&gt;&#10;      &lt;version&gt;${logback.kafka.appender.version}&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Prometheus --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;io.micrometer&lt;/groupId&gt;&#10;      &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Testing --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;      &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-kafka-test&lt;/artifactId&gt;&#10;      &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;  &lt;/dependencies&gt;&#10;&#10;  &lt;build&gt;&#10;    &lt;plugins&gt;&#10;      &lt;plugin&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;        &lt;version&gt;${spring-boot-maven-plugin.version}&lt;/version&gt;&#10;        &lt;executions&gt;&#10;          &lt;execution&gt;&#10;            &lt;goals&gt;&#10;              &lt;goal&gt;repackage&lt;/goal&gt;&#10;            &lt;/goals&gt;&#10;            &lt;configuration&gt;&#10;              &lt;mainClass&gt;com.moviebookingapp.MovieBookingApplication&lt;/mainClass&gt;&#10;              &lt;layout&gt;JAR&lt;/layout&gt;&#10;            &lt;/configuration&gt;&#10;          &lt;/execution&gt;&#10;        &lt;/executions&gt;&#10;      &lt;/plugin&gt;&#10;      &lt;plugin&gt;&#10;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;        &lt;version&gt;${maven-compiler-plugin.version}&lt;/version&gt;&#10;        &lt;configuration&gt;&#10;          &lt;release&gt;${maven.compiler.release}&lt;/release&gt;&#10;          &lt;annotationProcessorPaths&gt;&#10;            &lt;path&gt;&#10;              &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;              &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;              &lt;version&gt;${lombok.version}&lt;/version&gt;&#10;            &lt;/path&gt;&#10;          &lt;/annotationProcessorPaths&gt;&#10;          &lt;source&gt;${java.version}&lt;/source&gt;&#10;          &lt;target&gt;${java.version}&lt;/target&gt;&#10;        &lt;/configuration&gt;&#10;      &lt;/plugin&gt;&#10;      &lt;plugin&gt;&#10;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;        &lt;version&gt;${maven-surefire-plugin.version}&lt;/version&gt;&#10;        &lt;configuration&gt;&#10;          &lt;useModulePath&gt;false&lt;/useModulePath&gt;&#10;          &lt;reportsDirectory&gt;${project.build.directory}/surefire-reports&lt;/reportsDirectory&gt;&#10;        &lt;/configuration&gt;&#10;      &lt;/plugin&gt;&#10;      &lt;plugin&gt;&#10;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;        &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;&#10;        &lt;version&gt;${maven-jar-plugin.version}&lt;/version&gt;&#10;      &lt;/plugin&gt;&#10;      &lt;plugin&gt;&#10;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;        &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt;&#10;        &lt;version&gt;${maven-site-plugin.version}&lt;/version&gt;&#10;      &lt;/plugin&gt;&#10;      &lt;plugin&gt;&#10;        &lt;groupId&gt;org.jacoco&lt;/groupId&gt;&#10;        &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;&#10;        &lt;version&gt;${jacoco.version}&lt;/version&gt;&#10;        &lt;executions&gt;&#10;          &lt;execution&gt;&#10;            &lt;id&gt;prepare-agent&lt;/id&gt;&#10;            &lt;goals&gt;&#10;              &lt;goal&gt;prepare-agent&lt;/goal&gt;&#10;            &lt;/goals&gt;&#10;          &lt;/execution&gt;&#10;          &lt;execution&gt;&#10;            &lt;id&gt;report&lt;/id&gt;&#10;            &lt;phase&gt;test&lt;/phase&gt;&#10;            &lt;goals&gt;&#10;              &lt;goal&gt;report&lt;/goal&gt;&#10;            &lt;/goals&gt;&#10;          &lt;/execution&gt;&#10;          &lt;execution&gt;&#10;            &lt;id&gt;check&lt;/id&gt;&#10;            &lt;goals&gt;&#10;              &lt;goal&gt;check&lt;/goal&gt;&#10;            &lt;/goals&gt;&#10;            &lt;configuration&gt;&#10;              &lt;rules&gt;&#10;                &lt;rule&gt;&#10;                  &lt;element&gt;BUNDLE&lt;/element&gt;&#10;                  &lt;limits&gt;&#10;                    &lt;limit&gt;&#10;                      &lt;counter&gt;LINE&lt;/counter&gt;&#10;                      &lt;value&gt;COVEREDRATIO&lt;/value&gt;&#10;                      &lt;minimum&gt;${jacoco.coverage.minimum}&lt;/minimum&gt;&#10;                    &lt;/limit&gt;&#10;                  &lt;/limits&gt;&#10;                &lt;/rule&gt;&#10;              &lt;/rules&gt;&#10;            &lt;/configuration&gt;&#10;          &lt;/execution&gt;&#10;        &lt;/executions&gt;&#10;      &lt;/plugin&gt;&#10;    &lt;/plugins&gt;&#10;  &lt;/build&gt;&#10;&#10;  &lt;repositories&gt;&#10;    &lt;repository&gt;&#10;      &lt;id&gt;central&lt;/id&gt;&#10;      &lt;name&gt;Maven Central&lt;/name&gt;&#10;      &lt;url&gt;https://repo.maven.apache.org/maven2&lt;/url&gt;&#10;      &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;&#10;      &lt;snapshots&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/snapshots&gt;&#10;    &lt;/repository&gt;&#10;  &lt;/repositories&gt;&#10;&#10;  &lt;pluginRepositories&gt;&#10;    &lt;pluginRepository&gt;&#10;      &lt;id&gt;central&lt;/id&gt;&#10;      &lt;name&gt;Maven Central&lt;/name&gt;&#10;      &lt;url&gt;https://repo.maven.apache.org/maven2&lt;/url&gt;&#10;      &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;&#10;      &lt;snapshots&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/snapshots&gt;&#10;    &lt;/pluginRepository&gt;&#10;  &lt;/pluginRepositories&gt;&#10;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;  &lt;groupId&gt;com.moviebookingapp&lt;/groupId&gt;&#10;  &lt;artifactId&gt;moviebooking-backend&lt;/artifactId&gt;&#10;  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;  &lt;name&gt;moviebooking-backend&lt;/name&gt;&#10;  &lt;description&gt;Movie Booking App Backend (Spring Boot, MySQL, Kafka, Logging, Monitoring)&lt;/description&gt;&#10;  &#10;  &lt;properties&gt;&#10;    &lt;java.version&gt;17&lt;/java.version&gt;&#10;    &lt;spring-boot.version&gt;3.1.2&lt;/spring-boot.version&gt;&#10;    &lt;lombok.version&gt;1.18.28&lt;/lombok.version&gt;&#10;    &lt;logstash.encoder.version&gt;7.4&lt;/logstash.encoder.version&gt;&#10;    &lt;logback.kafka.appender.version&gt;0.1.0&lt;/logback.kafka.appender.version&gt;&#10;    &lt;spring-kafka.version&gt;3.0.9&lt;/spring-kafka.version&gt;&#10;    &lt;maven.compiler.release&gt;${java.version}&lt;/maven.compiler.release&gt;&#10;    &lt;spring-boot-maven-plugin.version&gt;3.1.2&lt;/spring-boot-maven-plugin.version&gt;&#10;    &lt;maven-jar-plugin.version&gt;3.3.0&lt;/maven-jar-plugin.version&gt;&#10;    &lt;maven-site-plugin.version&gt;4.0.0-M13&lt;/maven-site-plugin.version&gt;&#10;    &lt;maven-surefire-plugin.version&gt;3.2.5&lt;/maven-surefire-plugin.version&gt;&#10;    &lt;maven-compiler-plugin.version&gt;3.11.0&lt;/maven-compiler-plugin.version&gt;&#10;    &lt;jacoco.version&gt;0.8.10&lt;/jacoco.version&gt;&#10;    &lt;jacoco.coverage.minimum&gt;0.80&lt;/jacoco.coverage.minimum&gt;&#10;  &lt;/properties&gt;&#10;&#10;  &lt;dependencyManagement&gt;&#10;    &lt;dependencies&gt;&#10;      &lt;dependency&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;&#10;        &lt;version&gt;${spring-boot.version}&lt;/version&gt;&#10;        &lt;type&gt;pom&lt;/type&gt;&#10;        &lt;scope&gt;import&lt;/scope&gt;&#10;      &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;  &lt;/dependencyManagement&gt;&#10;&#10;  &lt;dependencies&gt;&#10;    &lt;!-- Spring Boot starters --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;io.rest-assured&lt;/groupId&gt;&#10;      &lt;artifactId&gt;rest-assured&lt;/artifactId&gt;&#10;      &lt;version&gt;5.3.2&lt;/version&gt;&#10;      &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Database driver: MySQL --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;com.mysql&lt;/groupId&gt;&#10;      &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;&#10;      &lt;scope&gt;runtime&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Kafka --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Security crypto for password hashing --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-security-crypto&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Lombok --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;      &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;      &lt;version&gt;${lombok.version}&lt;/version&gt;&#10;      &lt;scope&gt;provided&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Logging to Kafka and Logstash JSON --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;net.logstash.logback&lt;/groupId&gt;&#10;      &lt;artifactId&gt;logstash-logback-encoder&lt;/artifactId&gt;&#10;      &lt;version&gt;${logstash.encoder.version}&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;com.github.danielwegener&lt;/groupId&gt;&#10;      &lt;artifactId&gt;logback-kafka-appender&lt;/artifactId&gt;&#10;      &lt;version&gt;${logback.kafka.appender.version}&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Prometheus --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;io.micrometer&lt;/groupId&gt;&#10;      &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;&#10;    &lt;/dependency&gt;&#10;&#10;    &lt;!-- Testing --&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;      &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;&#10;      &lt;artifactId&gt;spring-kafka-test&lt;/artifactId&gt;&#10;      &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;        &lt;groupId&gt;com.h2database&lt;/groupId&gt;&#10;        &lt;artifactId&gt;h2&lt;/artifactId&gt;&#10;        &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;  &lt;/dependencies&gt;&#10;&#10;  &lt;build&gt;&#10;    &lt;plugins&gt;&#10;      &lt;plugin&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;        &lt;version&gt;${spring-boot-maven-plugin.version}&lt;/version&gt;&#10;        &lt;executions&gt;&#10;          &lt;execution&gt;&#10;            &lt;goals&gt;&#10;              &lt;goal&gt;repackage&lt;/goal&gt;&#10;            &lt;/goals&gt;&#10;            &lt;configuration&gt;&#10;              &lt;mainClass&gt;com.moviebookingapp.MovieBookingApplication&lt;/mainClass&gt;&#10;              &lt;layout&gt;JAR&lt;/layout&gt;&#10;            &lt;/configuration&gt;&#10;          &lt;/execution&gt;&#10;        &lt;/executions&gt;&#10;      &lt;/plugin&gt;&#10;      &lt;plugin&gt;&#10;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;        &lt;version&gt;${maven-compiler-plugin.version}&lt;/version&gt;&#10;        &lt;configuration&gt;&#10;          &lt;release&gt;${maven.compiler.release}&lt;/release&gt;&#10;          &lt;annotationProcessorPaths&gt;&#10;            &lt;path&gt;&#10;              &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;              &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;              &lt;version&gt;${lombok.version}&lt;/version&gt;&#10;            &lt;/path&gt;&#10;          &lt;/annotationProcessorPaths&gt;&#10;          &lt;source&gt;${java.version}&lt;/source&gt;&#10;          &lt;target&gt;${java.version}&lt;/target&gt;&#10;        &lt;/configuration&gt;&#10;      &lt;/plugin&gt;&#10;      &lt;plugin&gt;&#10;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;        &lt;version&gt;${maven-surefire-plugin.version}&lt;/version&gt;&#10;        &lt;configuration&gt;&#10;          &lt;useModulePath&gt;false&lt;/useModulePath&gt;&#10;          &lt;reportsDirectory&gt;${project.build.directory}/surefire-reports&lt;/reportsDirectory&gt;&#10;        &lt;/configuration&gt;&#10;      &lt;/plugin&gt;&#10;      &lt;plugin&gt;&#10;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;        &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;&#10;        &lt;version&gt;${maven-jar-plugin.version}&lt;/version&gt;&#10;      &lt;/plugin&gt;&#10;      &lt;plugin&gt;&#10;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;        &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt;&#10;        &lt;version&gt;${maven-site-plugin.version}&lt;/version&gt;&#10;      &lt;/plugin&gt;&#10;      &lt;plugin&gt;&#10;        &lt;groupId&gt;org.jacoco&lt;/groupId&gt;&#10;        &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;&#10;        &lt;version&gt;${jacoco.version}&lt;/version&gt;&#10;        &lt;executions&gt;&#10;          &lt;execution&gt;&#10;            &lt;id&gt;prepare-agent&lt;/id&gt;&#10;            &lt;goals&gt;&#10;              &lt;goal&gt;prepare-agent&lt;/goal&gt;&#10;            &lt;/goals&gt;&#10;          &lt;/execution&gt;&#10;          &lt;execution&gt;&#10;            &lt;id&gt;report&lt;/id&gt;&#10;            &lt;phase&gt;test&lt;/phase&gt;&#10;            &lt;goals&gt;&#10;              &lt;goal&gt;report&lt;/goal&gt;&#10;            &lt;/goals&gt;&#10;          &lt;/execution&gt;&#10;          &lt;execution&gt;&#10;            &lt;id&gt;check&lt;/id&gt;&#10;            &lt;goals&gt;&#10;              &lt;goal&gt;check&lt;/goal&gt;&#10;            &lt;/goals&gt;&#10;            &lt;configuration&gt;&#10;              &lt;rules&gt;&#10;                &lt;rule&gt;&#10;                  &lt;element&gt;BUNDLE&lt;/element&gt;&#10;                  &lt;limits&gt;&#10;                    &lt;limit&gt;&#10;                      &lt;counter&gt;LINE&lt;/counter&gt;&#10;                      &lt;value&gt;COVEREDRATIO&lt;/value&gt;&#10;                      &lt;minimum&gt;${jacoco.coverage.minimum}&lt;/minimum&gt;&#10;                    &lt;/limit&gt;&#10;                  &lt;/limits&gt;&#10;                &lt;/rule&gt;&#10;              &lt;/rules&gt;&#10;            &lt;/configuration&gt;&#10;          &lt;/execution&gt;&#10;        &lt;/executions&gt;&#10;      &lt;/plugin&gt;&#10;    &lt;/plugins&gt;&#10;  &lt;/build&gt;&#10;&#10;  &lt;repositories&gt;&#10;    &lt;repository&gt;&#10;      &lt;id&gt;central&lt;/id&gt;&#10;      &lt;name&gt;Maven Central&lt;/name&gt;&#10;      &lt;url&gt;https://repo.maven.apache.org/maven2&lt;/url&gt;&#10;      &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;&#10;      &lt;snapshots&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/snapshots&gt;&#10;    &lt;/repository&gt;&#10;  &lt;/repositories&gt;&#10;&#10;  &lt;pluginRepositories&gt;&#10;    &lt;pluginRepository&gt;&#10;      &lt;id&gt;central&lt;/id&gt;&#10;      &lt;name&gt;Maven Central&lt;/name&gt;&#10;      &lt;url&gt;https://repo.maven.apache.org/maven2&lt;/url&gt;&#10;      &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;&#10;      &lt;snapshots&gt;&lt;enabled&gt;false&lt;/enabled&gt;&lt;/snapshots&gt;&#10;    &lt;/pluginRepository&gt;&#10;  &lt;/pluginRepositories&gt;&#10;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/moviebookingapp/bootstrap/DataSeeder.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/moviebookingapp/bootstrap/DataSeeder.java" />
              <option name="originalContent" value="package com.moviebookingapp.bootstrap;&#10;&#10;import com.moviebookingapp.config.AppConstants;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.domain.User;&#10;import com.moviebookingapp.repository.MovieRepository;&#10;import com.moviebookingapp.repository.UserRepository;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.boot.ApplicationArguments;&#10;import org.springframework.boot.ApplicationRunner;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.stereotype.Component;&#10;&#10;@Component&#10;@RequiredArgsConstructor&#10;public class DataSeeder implements ApplicationRunner {&#10;&#10;    private final MovieRepository movieRepository;&#10;    private final UserRepository userRepository;&#10;    private final BCryptPasswordEncoder encoder;&#10;&#10;    @Override&#10;    public void run(ApplicationArguments args) {&#10;        seedMovies();&#10;        seedAdmin();&#10;    }&#10;&#10;    private void seedMovies() {&#10;        if (movieRepository.findAll().isEmpty()) {&#10;            movieRepository.save(Movie.builder().movieName(&quot;Inception&quot;).theatreName(&quot;Grand Cinema&quot;).totalTickets(100).status(&quot;BOOK ASAP&quot;).build());&#10;            movieRepository.save(Movie.builder().movieName(&quot;Inception&quot;).theatreName(&quot;Cityplex&quot;).totalTickets(120).status(&quot;BOOK ASAP&quot;).build());&#10;            movieRepository.save(Movie.builder().movieName(&quot;Interstellar&quot;).theatreName(&quot;Grand Cinema&quot;).totalTickets(90).status(&quot;BOOK ASAP&quot;).build());&#10;            movieRepository.save(Movie.builder().movieName(&quot;Interstellar&quot;).theatreName(&quot;Cityplex&quot;).totalTickets(110).status(&quot;BOOK ASAP&quot;).build());&#10;        }&#10;    }&#10;&#10;    private void seedAdmin() {&#10;        userRepository.findByLoginId(AppConstants.DEFAULT_ADMIN_LOGIN).orElseGet(() -&gt;&#10;                userRepository.save(User.builder()&#10;                        .firstName(&quot;Admin&quot;)&#10;                        .lastName(&quot;User&quot;)&#10;                        .email(AppConstants.DEFAULT_ADMIN_EMAIL)&#10;                        .loginId(AppConstants.DEFAULT_ADMIN_LOGIN)&#10;                        .passwordHash(encoder.encode(System.getenv().getOrDefault(&quot;DEFAULT_ADMIN_PASSWORD&quot;, &quot;ChangeMe123!&quot;)))&#10;                        .contactNumber(&quot;0000000000&quot;)&#10;                        .build())&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.moviebookingapp.bootstrap;&#10;&#10;import com.moviebookingapp.config.AppConstants;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.domain.User;&#10;import com.moviebookingapp.repository.MovieRepository;&#10;import com.moviebookingapp.repository.UserRepository;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.boot.ApplicationArguments;&#10;import org.springframework.boot.ApplicationRunner;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.stereotype.Component;&#10;&#10;@Component&#10;@RequiredArgsConstructor&#10;public class DataSeeder implements ApplicationRunner {&#10;&#10;    private final MovieRepository movieRepository;&#10;    private final UserRepository userRepository;&#10;    private final PasswordEncoder encoder;&#10;&#10;    @Override&#10;    public void run(ApplicationArguments args) {&#10;        seedMovies();&#10;        seedAdmin();&#10;    }&#10;&#10;    private void seedMovies() {&#10;        if (movieRepository.findAll().isEmpty()) {&#10;            movieRepository.save(Movie.builder().movieName(&quot;Inception&quot;).theatreName(&quot;Grand Cinema&quot;).totalTickets(100).status(&quot;BOOK ASAP&quot;).build());&#10;            movieRepository.save(Movie.builder().movieName(&quot;Inception&quot;).theatreName(&quot;Cityplex&quot;).totalTickets(120).status(&quot;BOOK ASAP&quot;).build());&#10;            movieRepository.save(Movie.builder().movieName(&quot;Interstellar&quot;).theatreName(&quot;Grand Cinema&quot;).totalTickets(90).status(&quot;BOOK ASAP&quot;).build());&#10;            movieRepository.save(Movie.builder().movieName(&quot;Interstellar&quot;).theatreName(&quot;Cityplex&quot;).totalTickets(110).status(&quot;BOOK ASAP&quot;).build());&#10;        }&#10;    }&#10;&#10;    private void seedAdmin() {&#10;        userRepository.findByLoginId(AppConstants.DEFAULT_ADMIN_LOGIN).orElseGet(() -&gt;&#10;                userRepository.save(User.builder()&#10;                        .firstName(&quot;Admin&quot;)&#10;                        .lastName(&quot;User&quot;)&#10;                        .email(AppConstants.DEFAULT_ADMIN_EMAIL)&#10;                        .loginId(AppConstants.DEFAULT_ADMIN_LOGIN)&#10;                        .passwordHash(encoder.encode(System.getenv().getOrDefault(&quot;DEFAULT_ADMIN_PASSWORD&quot;, &quot;ChangeMe123!&quot;)))&#10;                        .contactNumber(&quot;0000000000&quot;)&#10;                        .build())&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/moviebookingapp/controller/AdminController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/moviebookingapp/controller/AdminController.java" />
              <option name="originalContent" value="package com.moviebookingapp.controller;&#10;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.service.MovieService;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/v1.0/moviebooking&quot;)&#10;&#10;public class AdminController {&#10;&#10;    private final MovieService movieService;&#10;&#10;    @Autowired&#10;    public AdminController(MovieService movieService) {&#10;        this.movieService = movieService;&#10;    }&#10;&#10;    @GetMapping(&quot;/{moviename}/booked/{theatre}&quot;)&#10;    public ResponseEntity&lt;BookedInfo&gt; booked(@PathVariable(&quot;moviename&quot;) String moviename,&#10;                                             @PathVariable(&quot;theatre&quot;) String theatre) {&#10;        int booked = movieService.bookedCount(moviename, theatre);&#10;        Movie movie = movieService.searchMovies(moviename).stream()&#10;                .filter(m -&gt; m.getTheatreName().equalsIgnoreCase(theatre))&#10;                .findFirst().orElseThrow(() -&gt; new IllegalArgumentException(&quot;Movie not found&quot;));&#10;        int remaining = movie.getTotalTickets() - booked;&#10;        String status = remaining &lt;= 0 ? &quot;SOLD OUT&quot; : &quot;BOOK ASAP&quot;;&#10;        return ResponseEntity.ok(new BookedInfo(booked, Math.max(remaining, 0), status));&#10;    }&#10;&#10;    @Data&#10;    @AllArgsConstructor&#10;    static class BookedInfo {&#10;        private int booked;&#10;        private int remaining;&#10;        private String status;&#10;    }&#10;} " />
              <option name="updatedContent" value="package com.moviebookingapp.controller;&#10;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.service.MovieService;&#10;import com.moviebookingapp.dto.BookedInfoDTO;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/v1.0/moviebooking&quot;)&#10;public class AdminController {&#10;    private final MovieService movieService;&#10;&#10;    @Autowired&#10;    public AdminController(MovieService movieService) {&#10;        this.movieService = movieService;&#10;    }&#10;&#10;    @GetMapping(&quot;/{moviename}/booked/{theatre}&quot;)&#10;    public ResponseEntity&lt;BookedInfoDTO&gt; booked(@PathVariable(&quot;moviename&quot;) String moviename,&#10;                                             @PathVariable(&quot;theatre&quot;) String theatre) {&#10;        int booked = movieService.bookedCount(moviename, theatre);&#10;        Movie movie = movieService.searchMovies(moviename).stream()&#10;                .filter(m -&gt; m.getTheatreName().equalsIgnoreCase(theatre))&#10;                .findFirst().orElseThrow(() -&gt; new IllegalArgumentException(&quot;Movie not found&quot;));&#10;        int remaining = movie.getTotalTickets() - booked;&#10;        String status = remaining &lt;= 0 ? &quot;SOLD OUT&quot; : &quot;BOOK ASAP&quot;;&#10;        return ResponseEntity.ok(new BookedInfoDTO(booked, Math.max(remaining, 0), status));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/moviebookingapp/controller/AuthController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/moviebookingapp/controller/AuthController.java" />
              <option name="originalContent" value="package com.moviebookingapp.controller;&#10;&#10;import com.moviebookingapp.domain.User;&#10;import com.moviebookingapp.service.UserService;&#10;import jakarta.validation.Valid;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.Data;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/v1.0/moviebooking&quot;)&#10;public class AuthController {&#10;&#10;    private final UserService userService;&#10;&#10;    @Autowired&#10;    public AuthController(UserService userService) {&#10;        this.userService = userService;&#10;    }&#10;&#10;    @PostMapping(&quot;/register&quot;)&#10;    public ResponseEntity&lt;User&gt; register(@Valid @RequestBody RegistrationRequest request) {&#10;        User user = User.builder()&#10;                .firstName(request.getFirstName())&#10;                .lastName(request.getLastName())&#10;                .email(request.getEmail())&#10;                .loginId(request.getLoginId())&#10;                .contactNumber(request.getContactNumber())&#10;                .build();&#10;        return ResponseEntity.ok(userService.register(user, request.getPassword(), request.getConfirmPassword()));&#10;    }&#10;&#10;    @GetMapping(&quot;/login&quot;)&#10;    public ResponseEntity&lt;Boolean&gt; login(@RequestParam String loginId, @RequestParam String password) {&#10;        return ResponseEntity.ok(userService.login(loginId, password));&#10;    }&#10;&#10;    @GetMapping(&quot;/{username}/forgot&quot;)&#10;    public ResponseEntity&lt;String&gt; forgot(@PathVariable(&quot;username&quot;) String username) {&#10;        // In a real app: trigger email with reset token&#10;        return ResponseEntity.ok(&quot;Password reset link sent if user exists&quot;);&#10;    }&#10;&#10;    @PostMapping(&quot;/reset&quot;)&#10;    public ResponseEntity&lt;Void&gt; reset(@RequestParam String loginId,&#10;                                      @RequestParam String oldPassword,&#10;                                      @RequestParam String newPassword,&#10;                                      @RequestParam String confirmPassword) {&#10;        userService.resetPassword(loginId, oldPassword, newPassword, confirmPassword);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    @PostMapping(&quot;/logout&quot;)&#10;    public ResponseEntity&lt;Void&gt; logout() {&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    @Data&#10;    public static class RegistrationRequest {&#10;        @NotBlank&#10;        private String firstName;&#10;        @NotBlank&#10;        private String lastName;&#10;        @Email&#10;        @NotBlank&#10;        private String email;&#10;        @NotBlank&#10;        private String loginId;&#10;        @NotBlank&#10;        @Size(min = 8)&#10;        private String password;&#10;        @NotBlank&#10;        private String confirmPassword;&#10;        @NotBlank&#10;        private String contactNumber;&#10;    }&#10;&#10;    @Data&#10;    public static class LoginRequest {&#10;        @NotBlank&#10;        private String loginId;&#10;        @NotBlank&#10;        private String password;&#10;        @NotBlank&#10;        private String confirmPassword;&#10;    }&#10;    @Data&#10;    public static class PasswordResetRequest {&#10;        @NotBlank&#10;        private String loginId;&#10;        @NotBlank&#10;        private String oldPassword;&#10;        @NotBlank&#10;        @Size(min = 8)&#10;        private String newPassword;&#10;        @NotBlank&#10;        private String confirmPassword;&#10;    }&#10;} " />
              <option name="updatedContent" value="package com.moviebookingapp.controller;&#10;&#10;import com.moviebookingapp.domain.User;&#10;import com.moviebookingapp.dto.LoginRequestDTO;&#10;import com.moviebookingapp.dto.PasswordResetDTO;&#10;import com.moviebookingapp.dto.UserRegistrationDTO;&#10;import com.moviebookingapp.service.UserService;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.Collections;&#10;import java.util.Map;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/v1.0/moviebooking&quot;)&#10;@RequiredArgsConstructor&#10;public class AuthController {&#10;    private final UserService userService;&#10;&#10;    @PostMapping(&quot;/register&quot;)&#10;    public ResponseEntity&lt;User&gt; register(@Valid @RequestBody UserRegistrationDTO request) {&#10;        return ResponseEntity.ok(userService.register(&#10;            User.builder()&#10;                .firstName(request.getFirstName())&#10;                .lastName(request.getLastName())&#10;                .email(request.getEmail())&#10;                .loginId(request.getLoginId())&#10;                .contactNumber(request.getContactNumber())&#10;                .build(),&#10;            request.getPassword(),&#10;            request.getConfirmPassword()&#10;        ));&#10;    }&#10;&#10;    @PostMapping(&quot;/login&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; login(@Valid @RequestBody LoginRequestDTO request) {&#10;        boolean authenticated = userService.authenticate(request.getLoginId(), request.getPassword());&#10;        if (!authenticated) {&#10;            return ResponseEntity.badRequest().body(Collections.singletonMap(&quot;error&quot;, &quot;Invalid credentials&quot;));&#10;        }&#10;        // Generate and return token&#10;        return ResponseEntity.ok(Collections.singletonMap(&quot;token&quot;, &quot;dummy-token-&quot; + request.getLoginId()));&#10;    }&#10;&#10;    @PutMapping(&quot;/forgot&quot;)&#10;    public ResponseEntity&lt;Void&gt; resetPassword(@Valid @RequestBody PasswordResetDTO request) {&#10;        userService.changePassword(request.getLoginId(), request.getPassword(), request.getConfirmPassword());&#10;        return ResponseEntity.ok().build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/moviebookingapp/controller/TicketController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/moviebookingapp/controller/TicketController.java" />
              <option name="originalContent" value="package com.moviebookingapp.controller;&#10;&#10;import com.moviebookingapp.domain.Ticket;&#10;import com.moviebookingapp.service.MovieService;&#10;import com.moviebookingapp.service.TicketService;&#10;import jakarta.validation.Valid;&#10;import lombok.Data;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/v1.0/moviebooking&quot;)&#10;&#10;public class TicketController {&#10;&#10;    @Autowired&#10;    private final TicketService ticketService;&#10;    @Autowired&#10;    private final MovieService movieService;&#10;&#10;    @Autowired&#10;    public TicketController(TicketService ticketService, MovieService movieService) {&#10;        this.ticketService = ticketService;&#10;        this.movieService = movieService;&#10;    }&#10;    @PostMapping(&quot;/{moviename}/add&quot;)&#10;    public ResponseEntity&lt;Ticket&gt; add(@PathVariable(&quot;moviename&quot;) String moviename,&#10;                                      @Valid @RequestBody TicketRequest request) {&#10;        Ticket ticket = Ticket.builder()&#10;                .movieName(moviename)&#10;                .theatreName(request.getTheatreName())&#10;                .numberOfTickets(request.getNumberOfTickets())&#10;                .seatNumbers(request.getSeatNumbers())&#10;                .userLoginId(request.getUserLoginId())&#10;                .build();&#10;        return ResponseEntity.ok(ticketService.bookTicket(ticket));&#10;    }&#10;&#10;    @PutMapping(&quot;/{moviename}/update/{ticket}&quot;)&#10;    public ResponseEntity&lt;String&gt; updateStatus(@PathVariable(&quot;moviename&quot;) String moviename,&#10;                                               @PathVariable(&quot;ticket&quot;) String theatreName) {&#10;        String status = movieService.computeAndUpdateStatus(moviename, theatreName);&#10;        return ResponseEntity.ok(status);&#10;    }&#10;&#10;    @Data&#10;    public static class TicketRequest {&#10;        private String theatreName;&#10;        private int numberOfTickets;&#10;        private java.util.List&lt;String&gt; seatNumbers;&#10;        private String userLoginId;&#10;    }&#10;} " />
              <option name="updatedContent" value="package com.moviebookingapp.controller;&#10;&#10;import com.moviebookingapp.domain.Ticket;&#10;import com.moviebookingapp.dto.TicketRequestDTO;&#10;import com.moviebookingapp.service.MovieService;&#10;import com.moviebookingapp.service.TicketService;&#10;import jakarta.validation.Valid;&#10;import lombok.Data;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/v1.0/moviebooking&quot;)&#10;&#10;public class TicketController {&#10;&#10;    @Autowired&#10;    private final TicketService ticketService;&#10;    @Autowired&#10;    private final MovieService movieService;&#10;&#10;    @Autowired&#10;    public TicketController(TicketService ticketService, MovieService movieService) {&#10;        this.ticketService = ticketService;&#10;        this.movieService = movieService;&#10;    }&#10;    @PostMapping(&quot;/{moviename}/add&quot;)&#10;    public ResponseEntity&lt;Ticket&gt; add(@PathVariable(&quot;moviename&quot;) String moviename,&#10;                                      @Valid @RequestBody TicketRequestDTO request) {&#10;        Ticket ticket = Ticket.builder()&#10;                .movieName(moviename)&#10;                .theatreName(request.getTheatreName())&#10;                .numberOfTickets(request.getNumberOfTickets())&#10;                .seatNumbers(request.getSeatNumbers())&#10;                .userLoginId(request.getUserLoginId())&#10;                .build();&#10;        return ResponseEntity.ok(ticketService.bookTicket(ticket));&#10;    }&#10;&#10;    @PutMapping(&quot;/{moviename}/update/{ticket}&quot;)&#10;    public ResponseEntity&lt;String&gt; updateStatus(@PathVariable(&quot;moviename&quot;) String moviename,&#10;                                               @PathVariable(&quot;ticket&quot;) String theatreName) {&#10;        String status = movieService.computeAndUpdateStatus(moviename, theatreName);&#10;        return ResponseEntity.ok(status);&#10;    }&#10;&#10;    @Data&#10;    public static class TicketRequest {&#10;        private String theatreName;&#10;        private int numberOfTickets;&#10;        private java.util.List&lt;String&gt; seatNumbers;&#10;        private String userLoginId;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/moviebookingapp/domain/Movie.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/moviebookingapp/domain/Movie.java" />
              <option name="originalContent" value="package com.moviebookingapp.domain;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Min;&#10;import jakarta.validation.constraints.NotBlank;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;@Entity&#10;@Table(name = &quot;movies&quot;, uniqueConstraints = {&#10;        @UniqueConstraint(name = &quot;uk_movie_theatre&quot;, columnNames = {&quot;movie_name&quot;, &quot;theatre_name&quot;})&#10;})&#10;public class Movie {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @NotBlank&#10;    @Column(name = &quot;movie_name&quot;, nullable = false)&#10;    private String movieName;&#10;&#10;    @NotBlank&#10;    @Column(name = &quot;theatre_name&quot;, nullable = false)&#10;    private String theatreName;&#10;&#10;    @Min(0)&#10;    @Column(name = &quot;total_tickets&quot;, nullable = false)&#10;    private int totalTickets;&#10;&#10;    @Column(name = &quot;status&quot;)&#10;    private String status; // SOLD OUT / BOOK ASAP&#10;} " />
              <option name="updatedContent" value="package com.moviebookingapp.domain;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Min;&#10;import jakarta.validation.constraints.NotBlank;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;@Entity&#10;@Table(name = &quot;movies&quot;, uniqueConstraints = {&#10;        @UniqueConstraint(name = &quot;uk_movie_theatre&quot;, columnNames = {&quot;movie_name&quot;, &quot;theatre_name&quot;})&#10;})&#10;public class Movie {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @NotBlank&#10;    @Column(name = &quot;movie_name&quot;, nullable = false)&#10;    private String movieName;&#10;&#10;    @NotBlank&#10;    @Column(name = &quot;theatre_name&quot;, nullable = false)&#10;    private String theatreName;&#10;&#10;    @Min(0)&#10;    @Column(name = &quot;total_tickets&quot;, nullable = false)&#10;    private int totalTickets;&#10;&#10;    @Column(name = &quot;status&quot;)&#10;    private String status; // SOLD OUT / BOOK ASAP&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/moviebookingapp/dto/BookedInfoDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/moviebookingapp/dto/BookedInfoDTO.java" />
              <option name="updatedContent" value="package com.moviebookingapp.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class BookedInfoDTO {&#10;    private int booked;&#10;    private int remaining;&#10;    private String status;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/moviebookingapp/dto/LoginRequestDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/moviebookingapp/dto/LoginRequestDTO.java" />
              <option name="updatedContent" value="package com.moviebookingapp.dto;&#10;&#10;import jakarta.validation.constraints.NotBlank;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class LoginRequestDTO {&#10;    @NotBlank(message = &quot;Login ID is required&quot;)&#10;    private String loginId;&#10;&#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    private String password;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/moviebookingapp/dto/PasswordResetDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/moviebookingapp/dto/PasswordResetDTO.java" />
              <option name="updatedContent" value="package com.moviebookingapp.dto;&#10;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Pattern;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class PasswordResetDTO {&#10;    @NotBlank(message = &quot;Login ID is required&quot;)&#10;    private String loginId;&#10;&#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Pattern(regexp = &quot;^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&amp;+=])(?=\\S+$).{8,}$&quot;,&#10;            message = &quot;Password must be at least 8 characters long and contain at least one digit, one uppercase letter, one lowercase letter, and one special character&quot;)&#10;    private String password;&#10;&#10;    @NotBlank(message = &quot;Confirm password is required&quot;)&#10;    private String confirmPassword;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/moviebookingapp/dto/TicketRequestDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/moviebookingapp/dto/TicketRequestDTO.java" />
              <option name="updatedContent" value="package com.moviebookingapp.dto;&#10;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.NotEmpty;&#10;import jakarta.validation.constraints.Positive;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class TicketRequestDTO {&#10;    @NotBlank(message = &quot;Theatre name is required&quot;)&#10;    private String theatreName;&#10;    &#10;    @Positive(message = &quot;Number of tickets must be positive&quot;)&#10;    private int numberOfTickets;&#10;    &#10;    @NotEmpty(message = &quot;Seat numbers must be provided&quot;)&#10;    private List&lt;String&gt; seatNumbers;&#10;    &#10;    @NotBlank(message = &quot;User login ID is required&quot;)&#10;    private String userLoginId;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/moviebookingapp/dto/UserRegistrationDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/moviebookingapp/dto/UserRegistrationDTO.java" />
              <option name="updatedContent" value="package com.moviebookingapp.dto;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Pattern;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class UserRegistrationDTO {&#10;    @NotBlank(message = &quot;First name is required&quot;)&#10;    private String firstName;&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    private String lastName;&#10;&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Invalid email format&quot;)&#10;    private String email;&#10;&#10;    @NotBlank(message = &quot;Login ID is required&quot;)&#10;    private String loginId;&#10;&#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Pattern(regexp = &quot;^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&amp;+=])(?=\\S+$).{8,}$&quot;,&#10;            message = &quot;Password must be at least 8 characters long and contain at least one digit, one uppercase letter, one lowercase letter, and one special character&quot;)&#10;    private String password;&#10;&#10;    @NotBlank(message = &quot;Confirm password is required&quot;)&#10;    private String confirmPassword;&#10;&#10;    @NotBlank(message = &quot;Contact number is required&quot;)&#10;    @Pattern(regexp = &quot;^\\d{10}$&quot;, message = &quot;Contact number must be 10 digits&quot;)&#10;    private String contactNumber;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/moviebookingapp/service/TicketService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/moviebookingapp/service/TicketService.java" />
              <option name="originalContent" value="package com.moviebookingapp.service;&#10;&#10;import com.moviebookingapp.config.AppConstants;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.domain.Ticket;&#10;import com.moviebookingapp.repository.MovieRepository;&#10;import com.moviebookingapp.repository.TicketRepository;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.kafka.core.KafkaTemplate;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class TicketService {&#10;    private final TicketRepository ticketRepository;&#10;    private final MovieRepository movieRepository;&#10;    private final KafkaTemplate&lt;String, String&gt; kafkaTemplate;&#10;&#10;    public Ticket bookTicket(Ticket ticket) {&#10;        Movie movie = movieRepository.findByMovieNameAndTheatreName(ticket.getMovieName(), ticket.getTheatreName())&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(&quot;Movie/Theatre not found&quot;));&#10;        Long alreadyBookedLong = ticketRepository.totalBookedForMovieAndTheatre(ticket.getMovieName(), ticket.getTheatreName());&#10;        int alreadyBooked = alreadyBookedLong == null ? 0 : alreadyBookedLong.intValue();&#10;        if (alreadyBooked + ticket.getNumberOfTickets() &gt; movie.getTotalTickets()) {&#10;            throw new IllegalArgumentException(&quot;Not enough tickets available&quot;);&#10;        }&#10;        Ticket saved = ticketRepository.save(ticket);&#10;        kafkaTemplate.send(AppConstants.KAFKA_TOPIC_TICKETS,&#10;                ticket.getMovieName() + &quot;|&quot; + ticket.getTheatreName() + &quot;|&quot; + ticket.getNumberOfTickets());&#10;        return saved;&#10;    }&#10;} " />
              <option name="updatedContent" value="package com.moviebookingapp.service;&#10;&#10;import com.moviebookingapp.config.AppConstants;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.domain.Ticket;&#10;import com.moviebookingapp.repository.MovieRepository;&#10;import com.moviebookingapp.repository.TicketRepository;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.kafka.core.KafkaTemplate;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.HashSet;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class TicketService {&#10;    private final TicketRepository ticketRepository;&#10;    private final MovieRepository movieRepository;&#10;    private final KafkaTemplate&lt;String, String&gt; kafkaTemplate;&#10;&#10;    public Ticket bookTicket(Ticket ticket) {&#10;        validateTicket(ticket);&#10;        Movie movie = movieRepository.findByMovieNameAndTheatreName(ticket.getMovieName(), ticket.getTheatreName())&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(&quot;Movie/Theatre not found&quot;));&#10;        Long alreadyBookedLong = ticketRepository.totalBookedForMovieAndTheatre(ticket.getMovieName(), ticket.getTheatreName());&#10;        int alreadyBooked = alreadyBookedLong == null ? 0 : alreadyBookedLong.intValue();&#10;        if (alreadyBooked + ticket.getNumberOfTickets() &gt; movie.getTotalTickets()) {&#10;            throw new IllegalArgumentException(&quot;Not enough tickets available&quot;);&#10;        }&#10;        Ticket saved = ticketRepository.save(ticket);&#10;        kafkaTemplate.send(AppConstants.KAFKA_TOPIC_TICKETS,&#10;                ticket.getMovieName() + &quot;|&quot; + ticket.getTheatreName() + &quot;|&quot; + ticket.getNumberOfTickets());&#10;        return saved;&#10;    }&#10;&#10;    private void validateTicket(Ticket ticket) {&#10;        if (ticket.getNumberOfTickets() &lt;= 0) {&#10;            throw new IllegalArgumentException(&quot;Number of tickets must be positive&quot;);&#10;        }&#10;        if (ticket.getSeatNumbers() == null || ticket.getSeatNumbers().isEmpty()) {&#10;            throw new IllegalArgumentException(&quot;Seat numbers must be provided&quot;);&#10;        }&#10;        if (ticket.getSeatNumbers().size() != ticket.getNumberOfTickets()) {&#10;            throw new IllegalArgumentException(&quot;Number of seat numbers must match number of tickets&quot;);&#10;        }&#10;        if (new HashSet&lt;&gt;(ticket.getSeatNumbers()).size() != ticket.getSeatNumbers().size()) {&#10;            throw new IllegalArgumentException(&quot;Duplicate seat numbers are not allowed&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/logback-spring.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/logback-spring.xml" />
              <option name="originalContent" value="&lt;configuration&gt;&#10;  &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot;/&gt;&#10;  &lt;property name=&quot;LOG_LEVEL_PATTERN&quot; value=&quot;%5p&quot;/&gt;&#10;  &lt;property name=&quot;LOG_FILE&quot; value=&quot;${LOG_FILE:-}&quot;/&gt;&#10;&#10;  &lt;appender name=&quot;CONSOLE&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;&#10;    &lt;encoder class=&quot;net.logstash.logback.encoder.LogstashEncoder&quot;/&gt;&#10;  &lt;/appender&gt;&#10;&#10;  &lt;appender name=&quot;KAFKA&quot; class=&quot;com.github.danielwegener.logback.kafka.KafkaAppender&quot;&gt;&#10;    &lt;topic&gt;app-logs&lt;/topic&gt;&#10;    &lt;encoder class=&quot;com.github.danielwegener.logback.kafka.encoding.LayoutKafkaMessageEncoder&quot;&gt;&#10;      &lt;layout class=&quot;net.logstash.logback.layout.LogstashLayout&quot;/&gt;&#10;    &lt;/encoder&gt;&#10;    &lt;producerConfig&gt;bootstrap.servers=${spring.kafka.bootstrap-servers}&lt;/producerConfig&gt;&#10;  &lt;/appender&gt;&#10;&#10;  &lt;root level=&quot;INFO&quot;&gt;&#10;    &lt;appender-ref ref=&quot;CONSOLE&quot;/&gt;&#10;    &lt;appender-ref ref=&quot;KAFKA&quot;/&gt;&#10;  &lt;/root&gt;&#10;&lt;/configuration&gt; " />
              <option name="updatedContent" value="&lt;configuration&gt;&#13;&#10;  &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot;/&gt;&#13;&#10;  &lt;property name=&quot;LOG_LEVEL_PATTERN&quot; value=&quot;%5p&quot;/&gt;&#13;&#10;  &lt;property name=&quot;LOG_FILE&quot; value=&quot;${LOG_FILE:-}&quot;/&gt;&#13;&#10;&#13;&#10;  &lt;appender name=&quot;CONSOLE&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;&#13;&#10;    &lt;encoder class=&quot;net.logstash.logback.encoder.LogstashEncoder&quot;/&gt;&#13;&#10;  &lt;/appender&gt;&#13;&#10;&#13;&#10;  &lt;appender name=&quot;KAFKA&quot; class=&quot;com.github.danielwegener.logback.kafka.KafkaAppender&quot;&gt;&#13;&#10;    &lt;topic&gt;app-logs&lt;/topic&gt;&#13;&#10;    &lt;encoder class=&quot;com.github.danielwegener.logback.kafka.encoding.LayoutKafkaMessageEncoder&quot;&gt;&#13;&#10;      &lt;layout class=&quot;net.logstash.logback.layout.LogstashLayout&quot;/&gt;&#13;&#10;    &lt;/encoder&gt;&#13;&#10;    &lt;producerConfig&gt;bootstrap.servers=${spring.kafka.bootstrap-servers}&lt;/producerConfig&gt;&#13;&#10;    &lt;deliveryStrategy class=&quot;com.github.danielwegener.logback.kafka.delivery.AsynchronousDeliveryStrategy&quot;/&gt;&#13;&#10;  &lt;/appender&gt;&#13;&#10;&#13;&#10;  &lt;logger name=&quot;org.apache.kafka&quot; level=&quot;WARN&quot;/&gt;&#13;&#10;  &lt;logger name=&quot;kafka&quot; level=&quot;WARN&quot;/&gt;&#13;&#10;  &lt;logger name=&quot;org.springframework.kafka&quot; level=&quot;WARN&quot;/&gt;&#13;&#10;&#13;&#10;  &lt;root level=&quot;INFO&quot;&gt;&#13;&#10;    &lt;appender-ref ref=&quot;CONSOLE&quot;/&gt;&#13;&#10;    &lt;appender-ref ref=&quot;KAFKA&quot;/&gt;&#13;&#10;  &lt;/root&gt;&#13;&#10;&lt;/configuration&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/moviebookingapp/api/ApiEndpointsTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/moviebookingapp/api/ApiEndpointsTest.java" />
              <option name="originalContent" value="package com.moviebookingapp.api;&#10;&#10;import io.restassured.RestAssured;&#10;import io.restassured.http.ContentType;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.Order;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.boot.test.web.server.LocalServerPort;&#10;import org.springframework.test.context.ActiveProfiles;&#10;&#10;import java.util.Arrays;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;import static io.restassured.RestAssured.given;&#10;import static org.hamcrest.Matchers.*;&#10;&#10;@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)&#10;@ActiveProfiles(&quot;test&quot;)&#10;public class ApiEndpointsTest {&#10;&#10;    @LocalServerPort&#10;    private int port;&#10;&#10;    private String authToken;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        RestAssured.port = port;&#10;        RestAssured.baseURI = &quot;http://localhost&quot;;&#10;        RestAssured.basePath = &quot;/api/v1.0/moviebooking&quot;;&#10;    }&#10;&#10;    @Test&#10;    @Order(1)&#10;    void testUserRegistration() {&#10;        Map&lt;String, Object&gt; userRequest = new HashMap&lt;&gt;();&#10;        userRequest.put(&quot;firstName&quot;, &quot;John&quot;);&#10;        userRequest.put(&quot;lastName&quot;, &quot;Doe&quot;);&#10;        userRequest.put(&quot;email&quot;, &quot;john.doe@example.com&quot;);&#10;        userRequest.put(&quot;loginId&quot;, &quot;johndoe&quot;);&#10;        userRequest.put(&quot;password&quot;, &quot;Password123!&quot;);&#10;        userRequest.put(&quot;confirmPassword&quot;, &quot;Password123!&quot;);&#10;        userRequest.put(&quot;contactNumber&quot;, &quot;1234567890&quot;);&#10;&#10;        given()&#10;            .contentType(ContentType.JSON)&#10;            .body(userRequest)&#10;        .when()&#10;            .post(&quot;/register&quot;)&#10;        .then()&#10;            .statusCode(201)&#10;            .body(&quot;loginId&quot;, equalTo(&quot;johndoe&quot;));&#10;    }&#10;&#10;    @Test&#10;    @Order(2)&#10;    void testUserLogin() {&#10;        Map&lt;String, String&gt; loginRequest = new HashMap&lt;&gt;();&#10;        loginRequest.put(&quot;loginId&quot;, &quot;johndoe&quot;);&#10;        loginRequest.put(&quot;password&quot;, &quot;Password123!&quot;);&#10;&#10;        authToken = given()&#10;            .contentType(ContentType.JSON)&#10;            .body(loginRequest)&#10;        .when()&#10;            .post(&quot;/login&quot;)&#10;        .then()&#10;            .statusCode(200)&#10;            .extract()&#10;            .path(&quot;token&quot;);&#10;    }&#10;&#10;    @Test&#10;    @Order(3)&#10;    void testAddMovie() {&#10;        Map&lt;String, Object&gt; movieRequest = new HashMap&lt;&gt;();&#10;        movieRequest.put(&quot;movieName&quot;, &quot;Inception&quot;);&#10;        movieRequest.put(&quot;theatreName&quot;, &quot;PVR&quot;);&#10;        movieRequest.put(&quot;totalTickets&quot;, 100);&#10;        movieRequest.put(&quot;status&quot;, &quot;BOOK ASAP&quot;);&#10;&#10;        given()&#10;            .contentType(ContentType.JSON)&#10;            .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;            .body(movieRequest)&#10;        .when()&#10;            .post(&quot;/movies/add&quot;)&#10;        .then()&#10;            .statusCode(201)&#10;            .body(&quot;movieName&quot;, equalTo(&quot;Inception&quot;))&#10;            .body(&quot;totalTickets&quot;, equalTo(100));&#10;    }&#10;&#10;    @Test&#10;    @Order(4)&#10;    void testGetAllMovies() {&#10;        given()&#10;        .when()&#10;            .get(&quot;/all&quot;)&#10;        .then()&#10;            .statusCode(200)&#10;            .body(&quot;$&quot;, hasSize(greaterThan(0)))&#10;            .body(&quot;[0].movieName&quot;, notNullValue());&#10;    }&#10;&#10;    @Test&#10;    @Order(5)&#10;    void testSearchMovies() {&#10;        given()&#10;        .when()&#10;            .get(&quot;/movies/search/{moviename}&quot;, &quot;Inception&quot;)&#10;        .then()&#10;            .statusCode(200)&#10;            .body(&quot;$&quot;, hasSize(greaterThan(0)))&#10;            .body(&quot;[0].movieName&quot;, equalTo(&quot;Inception&quot;));&#10;    }&#10;&#10;    @Test&#10;    @Order(6)&#10;    void testBookTickets() {&#10;        Map&lt;String, Object&gt; bookingRequest = new HashMap&lt;&gt;();&#10;        bookingRequest.put(&quot;theatreName&quot;, &quot;PVR&quot;);&#10;        bookingRequest.put(&quot;numberOfTickets&quot;, 2);&#10;        bookingRequest.put(&quot;seatNumbers&quot;, Arrays.asList(&quot;A1&quot;, &quot;A2&quot;));&#10;        bookingRequest.put(&quot;userLoginId&quot;, &quot;johndoe&quot;);&#10;&#10;        given()&#10;            .contentType(ContentType.JSON)&#10;            .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;            .body(bookingRequest)&#10;        .when()&#10;            .post(&quot;/{moviename}/add&quot;, &quot;Inception&quot;)&#10;        .then()&#10;            .statusCode(200)&#10;            .body(&quot;movieName&quot;, equalTo(&quot;Inception&quot;))&#10;            .body(&quot;numberOfTickets&quot;, equalTo(2));&#10;    }&#10;&#10;    @Test&#10;    @Order(7)&#10;    void testGetBookedTicketsInfo() {&#10;        given()&#10;            .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;        .when()&#10;            .get(&quot;/{moviename}/booked/{theatre}&quot;, &quot;Inception&quot;, &quot;PVR&quot;)&#10;        .then()&#10;            .statusCode(200)&#10;            .body(&quot;booked&quot;, greaterThan(0));&#10;    }&#10;&#10;    @Test&#10;    @Order(8)&#10;    void testUpdateTickets() {&#10;        given()&#10;            .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;        .when()&#10;            .patch(&quot;/{moviename}/theatres/{theatre}/tickets?total=80&quot;, &quot;Inception&quot;, &quot;PVR&quot;)&#10;        .then()&#10;            .statusCode(200)&#10;            .body(&quot;totalTickets&quot;, equalTo(80));&#10;    }&#10;&#10;    @Test&#10;    @Order(9)&#10;    void testPasswordReset() {&#10;        Map&lt;String, String&gt; resetRequest = new HashMap&lt;&gt;();&#10;        resetRequest.put(&quot;loginId&quot;, &quot;johndoe&quot;);&#10;        resetRequest.put(&quot;password&quot;, &quot;NewPassword123!&quot;);&#10;        resetRequest.put(&quot;confirmPassword&quot;, &quot;NewPassword123!&quot;);&#10;&#10;        given()&#10;            .contentType(ContentType.JSON)&#10;            .body(resetRequest)&#10;        .when()&#10;            .put(&quot;/forgot&quot;)&#10;        .then()&#10;            .statusCode(200);&#10;    }&#10;&#10;    @Test&#10;    @Order(10)&#10;    void testDeleteMovie() {&#10;        given()&#10;            .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;        .when()&#10;            .delete(&quot;/{moviename}/delete/{theatre}&quot;, &quot;Inception&quot;, &quot;PVR&quot;)&#10;        .then()&#10;            .statusCode(200);&#10;    }&#10;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.moviebookingapp.api;&#10;&#10;import io.restassured.RestAssured;&#10;import io.restassured.http.ContentType;&#10;import org.junit.jupiter.api.*;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.boot.test.web.server.LocalServerPort;&#10;import org.springframework.test.context.ActiveProfiles;&#10;&#10;import java.util.Arrays;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;import static io.restassured.RestAssured.given;&#10;import static org.hamcrest.Matchers.*;&#10;&#10;@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)&#10;@ActiveProfiles(&quot;test&quot;)&#10;@TestMethodOrder(MethodOrderer.OrderAnnotation.class)&#10;public class ApiEndpointsTest {&#10;&#10;    @LocalServerPort&#10;    private int port;&#10;&#10;    private String authToken;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        RestAssured.port = port;&#10;        RestAssured.baseURI = &quot;http://localhost&quot;;&#10;        RestAssured.basePath = &quot;/api/v1.0/moviebooking&quot;;&#10;    }&#10;&#10;    @Test&#10;    @Order(1)&#10;    void testUserRegistration() {&#10;        Map&lt;String, Object&gt; userRequest = new HashMap&lt;&gt;();&#10;        userRequest.put(&quot;firstName&quot;, &quot;John&quot;);&#10;        userRequest.put(&quot;lastName&quot;, &quot;Doe&quot;);&#10;        userRequest.put(&quot;email&quot;, &quot;john.doe@example.com&quot;);&#10;        userRequest.put(&quot;loginId&quot;, &quot;johndoe&quot;);&#10;        userRequest.put(&quot;password&quot;, &quot;Password123!&quot;);&#10;        userRequest.put(&quot;confirmPassword&quot;, &quot;Password123!&quot;);&#10;        userRequest.put(&quot;contactNumber&quot;, &quot;1234567890&quot;);&#10;&#10;        given()&#10;            .contentType(ContentType.JSON)&#10;            .body(userRequest)&#10;        .when()&#10;            .post(&quot;/register&quot;)&#10;        .then()&#10;            .statusCode(200);&#10;    }&#10;&#10;    @Test&#10;    @Order(2)&#10;    void testUserLogin() {&#10;        Map&lt;String, String&gt; loginRequest = new HashMap&lt;&gt;();&#10;        loginRequest.put(&quot;loginId&quot;, &quot;johndoe&quot;);&#10;        loginRequest.put(&quot;password&quot;, &quot;Password123!&quot;);&#10;&#10;        authToken = given()&#10;            .contentType(ContentType.JSON)&#10;            .body(loginRequest)&#10;        .when()&#10;            .post(&quot;/login&quot;)&#10;        .then()&#10;            .statusCode(200)&#10;            .extract()&#10;            .path(&quot;token&quot;);&#10;    }&#10;&#10;    @Test&#10;    @Order(3)&#10;    void testAddMovie() {&#10;        Map&lt;String, Object&gt; movieRequest = new HashMap&lt;&gt;();&#10;        movieRequest.put(&quot;movieName&quot;, &quot;Inception&quot;);&#10;        movieRequest.put(&quot;theatreName&quot;, &quot;PVR&quot;);&#10;        movieRequest.put(&quot;totalTickets&quot;, 100);&#10;        movieRequest.put(&quot;status&quot;, &quot;BOOK ASAP&quot;);&#10;&#10;        given()&#10;            .contentType(ContentType.JSON)&#10;            .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;            .body(movieRequest)&#10;        .when()&#10;            .post(&quot;/movies/add&quot;)&#10;        .then()&#10;            .statusCode(200)&#10;            .body(&quot;movieName&quot;, equalTo(&quot;Inception&quot;));&#10;    }&#10;&#10;    @Test&#10;    @Order(4)&#10;    void testBookTickets() {&#10;        Map&lt;String, Object&gt; bookingRequest = new HashMap&lt;&gt;();&#10;        bookingRequest.put(&quot;theatreName&quot;, &quot;PVR&quot;);&#10;        bookingRequest.put(&quot;numberOfTickets&quot;, 2);&#10;        bookingRequest.put(&quot;seatNumbers&quot;, Arrays.asList(&quot;A1&quot;, &quot;A2&quot;));&#10;        bookingRequest.put(&quot;userLoginId&quot;, &quot;johndoe&quot;);&#10;&#10;        given()&#10;            .contentType(ContentType.JSON)&#10;            .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;            .body(bookingRequest)&#10;        .when()&#10;            .post(&quot;/Inception/add&quot;)&#10;        .then()&#10;            .statusCode(200)&#10;            .body(&quot;movieName&quot;, equalTo(&quot;Inception&quot;))&#10;            .body(&quot;numberOfTickets&quot;, equalTo(2));&#10;    }&#10;&#10;    @Test&#10;    @Order(5)&#10;    void testUpdateTickets() {&#10;        given()&#10;            .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;        .when()&#10;            .patch(&quot;/Inception/theatres/PVR/tickets?total=80&quot;)&#10;        .then()&#10;            .statusCode(200)&#10;            .body(&quot;totalTickets&quot;, equalTo(80));&#10;    }&#10;&#10;    @Test&#10;    @Order(6)&#10;    void testChangePassword() {&#10;        Map&lt;String, String&gt; resetRequest = new HashMap&lt;&gt;();&#10;        resetRequest.put(&quot;loginId&quot;, &quot;johndoe&quot;);&#10;        resetRequest.put(&quot;password&quot;, &quot;NewPassword123!&quot;);&#10;        resetRequest.put(&quot;confirmPassword&quot;, &quot;NewPassword123!&quot;);&#10;&#10;        given()&#10;            .contentType(ContentType.JSON)&#10;            .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;            .body(resetRequest)&#10;        .when()&#10;            .put(&quot;/forgot&quot;)&#10;        .then()&#10;            .statusCode(200);&#10;    }&#10;&#10;    @Test&#10;    @Order(7)&#10;    void testInvalidLogin() {&#10;        Map&lt;String, String&gt; loginRequest = new HashMap&lt;&gt;();&#10;        loginRequest.put(&quot;loginId&quot;, &quot;nonexistent&quot;);&#10;        loginRequest.put(&quot;password&quot;, &quot;wrongpassword&quot;);&#10;&#10;        given()&#10;            .contentType(ContentType.JSON)&#10;            .body(loginRequest)&#10;        .when()&#10;            .post(&quot;/login&quot;)&#10;        .then()&#10;            .statusCode(400);&#10;    }&#10;&#10;    @Test&#10;    @Order(8)&#10;    void testUnauthorizedAccess() {&#10;        Map&lt;String, Object&gt; movieRequest = new HashMap&lt;&gt;();&#10;        movieRequest.put(&quot;movieName&quot;, &quot;Inception2&quot;);&#10;        movieRequest.put(&quot;theatreName&quot;, &quot;INOX&quot;);&#10;        movieRequest.put(&quot;totalTickets&quot;, 100);&#10;&#10;        given()&#10;            .contentType(ContentType.JSON)&#10;            .body(movieRequest)&#10;        .when()&#10;            .post(&quot;/movies/add&quot;)&#10;        .then()&#10;            .statusCode(401);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/moviebookingapp/config/TestConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/moviebookingapp/config/TestConfig.java" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.moviebookingapp.config;&#10;&#10;import org.springframework.boot.test.context.TestConfiguration;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.testcontainers.containers.KafkaContainer;&#10;import org.testcontainers.containers.MySQLContainer;&#10;import org.testcontainers.utility.DockerImageName;&#10;&#10;@TestConfiguration&#10;                .withReuse(true);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/moviebookingapp/controller/AdminControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/moviebookingapp/controller/AdminControllerTest.java" />
              <option name="updatedContent" value="package com.moviebookingapp.controller;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.domain.Ticket;&#10;import com.moviebookingapp.domain.User;&#10;import com.moviebookingapp.service.MovieService;&#10;import com.moviebookingapp.service.TicketService;&#10;import com.moviebookingapp.service.UserService;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.Arrays;&#10;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@SpringBootTest&#10;@AutoConfigureMockMvc&#10;@ActiveProfiles(&quot;test&quot;)&#10;@Transactional&#10;class AdminControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    @Autowired&#10;    private MovieService movieService;&#10;&#10;    @Autowired&#10;    private TicketService ticketService;&#10;&#10;    @Autowired&#10;    private UserService userService;&#10;&#10;    private Movie testMovie;&#10;    private String authToken;&#10;    private static final String TEST_PASSWORD = &quot;Password123!&quot;;&#10;&#10;    @BeforeEach&#10;    void setUp() throws Exception {&#10;        // Create admin user&#10;        User adminUser = User.builder()&#10;                .firstName(&quot;Admin&quot;)&#10;                .lastName(&quot;User&quot;)&#10;                .email(&quot;admin@test.com&quot;)&#10;                .loginId(&quot;admin&quot;)&#10;                .contactNumber(&quot;1234567890&quot;)&#10;                .build();&#10;        userService.register(adminUser, TEST_PASSWORD, TEST_PASSWORD);&#10;&#10;        // Get auth token&#10;        String response = mockMvc.perform(post(&quot;/api/v1.0/moviebooking/login&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(new LoginRequest(&quot;admin&quot;, TEST_PASSWORD))))&#10;                .andReturn().getResponse().getContentAsString();&#10;        authToken = objectMapper.readTree(response).get(&quot;token&quot;).asText();&#10;&#10;        // Create test movie&#10;        testMovie = movieService.addMovie(Movie.builder()&#10;                .movieName(&quot;Test Movie&quot;)&#10;                .theatreName(&quot;Test Theatre&quot;)&#10;                .totalTickets(100)&#10;                .status(&quot;BOOK ASAP&quot;)&#10;                .build());&#10;    }&#10;&#10;    @Test&#10;    void getBookedTicketsInfo_ShouldReturnCorrectInfo() throws Exception {&#10;        // Book some tickets first&#10;        Ticket ticket = Ticket.builder()&#10;                .movieName(testMovie.getMovieName())&#10;                .theatreName(testMovie.getTheatreName())&#10;                .numberOfTickets(20)&#10;                .seatNumbers(Arrays.asList(&quot;A1&quot;, &quot;A2&quot;))&#10;                .userLoginId(&quot;admin&quot;)&#10;                .build();&#10;        ticketService.bookTicket(ticket);&#10;&#10;        mockMvc.perform(get(&quot;/api/v1.0/moviebooking/{moviename}/booked/{theatre}&quot;,&#10;                testMovie.getMovieName(), testMovie.getTheatreName())&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.booked&quot;).value(20))&#10;                .andExpect(jsonPath(&quot;$.remaining&quot;).value(80))&#10;                .andExpect(jsonPath(&quot;$.status&quot;).value(&quot;BOOK ASAP&quot;));&#10;    }&#10;&#10;    @Test&#10;    void getBookedTicketsInfo_ShouldShowSoldOut_WhenNoTickets() throws Exception {&#10;        // Book all tickets&#10;        Ticket ticket = Ticket.builder()&#10;                .movieName(testMovie.getMovieName())&#10;                .theatreName(testMovie.getTheatreName())&#10;                .numberOfTickets(100)&#10;                .seatNumbers(generateSeatNumbers(100))&#10;                .userLoginId(&quot;admin&quot;)&#10;                .build();&#10;        ticketService.bookTicket(ticket);&#10;&#10;        mockMvc.perform(get(&quot;/api/v1.0/moviebooking/{moviename}/booked/{theatre}&quot;,&#10;                testMovie.getMovieName(), testMovie.getTheatreName())&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.booked&quot;).value(100))&#10;                .andExpect(jsonPath(&quot;$.remaining&quot;).value(0))&#10;                .andExpect(jsonPath(&quot;$.status&quot;).value(&quot;SOLD OUT&quot;));&#10;    }&#10;&#10;    @Test&#10;    void getBookedTicketsInfo_ShouldFail_WhenMovieNotFound() throws Exception {&#10;        mockMvc.perform(get(&quot;/api/v1.0/moviebooking/{moviename}/booked/{theatre}&quot;,&#10;                &quot;NonexistentMovie&quot;, testMovie.getTheatreName())&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken))&#10;                .andExpect(status().isBadRequest());&#10;    }&#10;&#10;    @Test&#10;    void getBookedTicketsInfo_ShouldFail_WhenUnauthorized() throws Exception {&#10;        mockMvc.perform(get(&quot;/api/v1.0/moviebooking/{moviename}/booked/{theatre}&quot;,&#10;                testMovie.getMovieName(), testMovie.getTheatreName()))&#10;                .andExpect(status().isUnauthorized());&#10;    }&#10;&#10;    private static class LoginRequest {&#10;        private final String loginId;&#10;        private final String password;&#10;&#10;        public LoginRequest(String loginId, String password) {&#10;            this.loginId = loginId;&#10;            this.password = password;&#10;        }&#10;&#10;        public String getLoginId() { return loginId; }&#10;        public String getPassword() { return password; }&#10;    }&#10;&#10;    private String[] generateSeatNumbers(int count) {&#10;        String[] seats = new String[count];&#10;        for (int i = 0; i &lt; count; i++) {&#10;            seats[i] = String.format(&quot;A%d&quot;, i + 1);&#10;        }&#10;        return seats;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/moviebookingapp/controller/AuthControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/moviebookingapp/controller/AuthControllerTest.java" />
              <option name="originalContent" value="package com.moviebookingapp.controller;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.moviebookingapp.domain.User;&#10;import com.moviebookingapp.service.UserService;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@SpringBootTest&#10;@AutoConfigureMockMvc&#10;@ActiveProfiles(&quot;test&quot;)&#10;class AuthControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    @Autowired&#10;    private UserService userService;&#10;&#10;    private User testUser;&#10;    private static final String TEST_PASSWORD = &quot;Password123!&quot;;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        testUser = User.builder()&#10;                .firstName(&quot;John&quot;)&#10;                .lastName(&quot;Doe&quot;)&#10;                .email(&quot;john.doe@example.com&quot;)&#10;                .loginId(&quot;johndoe&quot;)&#10;                .contactNumber(&quot;1234567890&quot;)&#10;                .build();&#10;    }&#10;&#10;    @Test&#10;    void register_ShouldCreateUser_WhenValidRequest() throws Exception {&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/register&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(new RegistrationRequest(&#10;                    testUser.getFirstName(),&#10;                    testUser.getLastName(),&#10;                    testUser.getEmail(),&#10;                    testUser.getLoginId(),&#10;                    TEST_PASSWORD,&#10;                    TEST_PASSWORD,&#10;                    testUser.getContactNumber()&#10;                ))))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void login_ShouldReturnToken_WhenValidCredentials() throws Exception {&#10;        // First register the user&#10;        userService.register(testUser, TEST_PASSWORD, TEST_PASSWORD);&#10;&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/login&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(new LoginRequest(&#10;                    testUser.getLoginId(),&#10;                    TEST_PASSWORD&#10;                ))))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.token&quot;).exists());&#10;    }&#10;&#10;    @Test&#10;    void changePassword_ShouldSucceed_WhenValidRequest() throws Exception {&#10;        // First register the user&#10;        userService.register(testUser, TEST_PASSWORD, TEST_PASSWORD);&#10;&#10;        mockMvc.perform(put(&quot;/api/v1.0/moviebooking/forgot&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(new PasswordChangeRequest(&#10;                    testUser.getLoginId(),&#10;                    &quot;NewPassword123!&quot;,&#10;                    &quot;NewPassword123!&quot;&#10;                ))))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    private static class RegistrationRequest {&#10;        private String firstName;&#10;        private String lastName;&#10;        private String email;&#10;        private String loginId;&#10;        private String password;&#10;        private String confirmPassword;&#10;        private String contactNumber;&#10;&#10;        public RegistrationRequest(String firstName, String lastName, String email,&#10;                                 String loginId, String password, String confirmPassword,&#10;                                 String contactNumber) {&#10;            this.firstName = firstName;&#10;            this.lastName = lastName;&#10;            this.email = email;&#10;            this.loginId = loginId;&#10;            this.password = password;&#10;            this.confirmPassword = confirmPassword;&#10;            this.contactNumber = contactNumber;&#10;        }&#10;&#10;        // Getters and setters&#10;    }&#10;&#10;    private static class LoginRequest {&#10;        private String loginId;&#10;        private String password;&#10;&#10;        public LoginRequest(String loginId, String password) {&#10;            this.loginId = loginId;&#10;            this.password = password;&#10;        }&#10;&#10;        // Getters and setters&#10;    }&#10;&#10;    private static class PasswordChangeRequest {&#10;        private String loginId;&#10;        private String password;&#10;        private String confirmPassword;&#10;&#10;        public PasswordChangeRequest(String loginId, String password, String confirmPassword) {&#10;            this.loginId = loginId;&#10;            this.password = password;&#10;            this.confirmPassword = confirmPassword;&#10;        }&#10;&#10;        // Getters and setters&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.moviebookingapp.controller;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.moviebookingapp.dto.LoginRequestDTO;&#10;import com.moviebookingapp.dto.PasswordResetDTO;&#10;import com.moviebookingapp.dto.UserRegistrationDTO;&#10;import com.moviebookingapp.service.UserService;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@SpringBootTest&#10;@AutoConfigureMockMvc&#10;@ActiveProfiles(&quot;test&quot;)&#10;@Transactional&#10;class AuthControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    @Autowired&#10;    private UserService userService;&#10;&#10;    private UserRegistrationDTO registrationDTO;&#10;    private static final String TEST_PASSWORD = &quot;Password123!&quot;;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        registrationDTO = new UserRegistrationDTO(&#10;            &quot;John&quot;,&#10;            &quot;Doe&quot;,&#10;            &quot;john.doe@example.com&quot;,&#10;            &quot;johndoe&quot;,&#10;            TEST_PASSWORD,&#10;            TEST_PASSWORD,&#10;            &quot;1234567890&quot;&#10;        );&#10;    }&#10;&#10;    @Test&#10;    void register_ShouldSucceed_WhenValidRequest() throws Exception {&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/register&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(registrationDTO)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.loginId&quot;).value(&quot;johndoe&quot;))&#10;                .andExpect(jsonPath(&quot;$.email&quot;).value(&quot;john.doe@example.com&quot;));&#10;    }&#10;&#10;    @Test&#10;    void register_ShouldFail_WhenPasswordsDontMatch() throws Exception {&#10;        registrationDTO.setConfirmPassword(&quot;DifferentPassword123!&quot;);&#10;        &#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/register&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(registrationDTO)))&#10;                .andExpect(status().isBadRequest());&#10;    }&#10;&#10;    @Test&#10;    void register_ShouldFail_WhenLoginIdExists() throws Exception {&#10;        // First registration&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/register&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(registrationDTO)));&#10;&#10;        // Second registration with same loginId&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/register&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(registrationDTO)))&#10;                .andExpect(status().isBadRequest());&#10;    }&#10;&#10;    @Test&#10;    void login_ShouldSucceed_WhenValidCredentials() throws Exception {&#10;        // Register user first&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/register&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(registrationDTO)));&#10;&#10;        // Try to login&#10;        LoginRequestDTO loginRequest = new LoginRequestDTO(registrationDTO.getLoginId(), TEST_PASSWORD);&#10;        &#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/login&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(loginRequest)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.token&quot;).exists());&#10;    }&#10;&#10;    @Test&#10;    void login_ShouldFail_WhenInvalidCredentials() throws Exception {&#10;        LoginRequestDTO loginRequest = new LoginRequestDTO(&quot;nonexistent&quot;, &quot;wrongpassword&quot;);&#10;        &#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/login&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(loginRequest)))&#10;                .andExpect(status().isBadRequest());&#10;    }&#10;&#10;    @Test&#10;    void changePassword_ShouldSucceed_WhenValidRequest() throws Exception {&#10;        // Register user first&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/register&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(registrationDTO)));&#10;&#10;        // Get auth token&#10;        LoginRequestDTO loginRequest = new LoginRequestDTO(registrationDTO.getLoginId(), TEST_PASSWORD);&#10;        String response = mockMvc.perform(post(&quot;/api/v1.0/moviebooking/login&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(loginRequest)))&#10;                .andReturn().getResponse().getContentAsString();&#10;        String authToken = objectMapper.readTree(response).get(&quot;token&quot;).asText();&#10;&#10;        // Change password&#10;        PasswordResetDTO resetRequest = new PasswordResetDTO(&#10;            registrationDTO.getLoginId(),&#10;            &quot;NewPassword123!&quot;,&#10;            &quot;NewPassword123!&quot;&#10;        );&#10;&#10;        mockMvc.perform(put(&quot;/api/v1.0/moviebooking/forgot&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;                .content(objectMapper.writeValueAsString(resetRequest)))&#10;                .andExpect(status().isOk());&#10;&#10;        // Verify can login with new password&#10;        LoginRequestDTO newLoginRequest = new LoginRequestDTO(registrationDTO.getLoginId(), &quot;NewPassword123!&quot;);&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/login&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(newLoginRequest)))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    @Test&#10;    void changePassword_ShouldFail_WhenUnauthorized() throws Exception {&#10;        PasswordResetDTO resetRequest = new PasswordResetDTO(&#10;            &quot;someuser&quot;,&#10;            &quot;NewPassword123!&quot;,&#10;            &quot;NewPassword123!&quot;&#10;        );&#10;&#10;        mockMvc.perform(put(&quot;/api/v1.0/moviebooking/forgot&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(resetRequest)))&#10;                .andExpect(status().isUnauthorized());&#10;    }&#10;&#10;    @Test&#10;    void changePassword_ShouldFail_WhenPasswordsDontMatch() throws Exception {&#10;        // Register and get token first&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/register&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(registrationDTO)));&#10;&#10;        String response = mockMvc.perform(post(&quot;/api/v1.0/moviebooking/login&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(new LoginRequestDTO(registrationDTO.getLoginId(), TEST_PASSWORD))))&#10;                .andReturn().getResponse().getContentAsString();&#10;        String authToken = objectMapper.readTree(response).get(&quot;token&quot;).asText();&#10;&#10;        PasswordResetDTO resetRequest = new PasswordResetDTO(&#10;            registrationDTO.getLoginId(),&#10;            &quot;NewPassword123!&quot;,&#10;            &quot;DifferentPassword123!&quot;&#10;        );&#10;&#10;        mockMvc.perform(put(&quot;/api/v1.0/moviebooking/forgot&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;                .content(objectMapper.writeValueAsString(resetRequest)))&#10;                .andExpect(status().isBadRequest());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/moviebookingapp/controller/MovieControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/moviebookingapp/controller/MovieControllerTest.java" />
              <option name="originalContent" value="package com.moviebookingapp.controller;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.domain.User;&#10;import com.moviebookingapp.service.MovieService;&#10;import com.moviebookingapp.service.UserService;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.transaction.annotation.Transactional;&#10;import static org.hamcrest.Matchers.hasSize;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@SpringBootTest&#10;@AutoConfigureMockMvc&#10;@ActiveProfiles(&quot;test&quot;)&#10;@Transactional&#10;class MovieControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    @Autowired&#10;    private MovieService movieService;&#10;&#10;    @Autowired&#10;    private UserService userService;&#10;&#10;    private Movie testMovie;&#10;    private String authToken;&#10;    private static final String TEST_PASSWORD = &quot;Password123!&quot;;&#10;&#10;    @BeforeEach&#10;    void setUp() throws Exception {&#10;        // Create and login admin user&#10;        User adminUser = User.builder()&#10;                .firstName(&quot;Admin&quot;)&#10;                .lastName(&quot;User&quot;)&#10;                .email(&quot;admin@test.com&quot;)&#10;                .loginId(&quot;admin&quot;)&#10;                .contactNumber(&quot;1234567890&quot;)&#10;                .build();&#10;        userService.register(adminUser, TEST_PASSWORD, TEST_PASSWORD);&#10;&#10;        // Get auth token&#10;        String response = mockMvc.perform(post(&quot;/api/v1.0/moviebooking/login&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(new LoginRequest(&quot;admin&quot;, TEST_PASSWORD))))&#10;                .andReturn().getResponse().getContentAsString();&#10;        authToken = objectMapper.readTree(response).get(&quot;token&quot;).asText();&#10;&#10;        // Create test movie&#10;        testMovie = Movie.builder()&#10;                .movieName(&quot;Test Movie&quot;)&#10;                .theatreName(&quot;Test Theatre&quot;)&#10;                .totalTickets(100)&#10;                .status(&quot;BOOK ASAP&quot;)&#10;                .build();&#10;    }&#10;&#10;    @Test&#10;    void getAllMovies_ShouldReturnMovies() throws Exception {&#10;        movieService.addMovie(testMovie);&#10;&#10;        mockMvc.perform(get(&quot;/api/v1.0/moviebooking/all&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(content().contentType(MediaType.APPLICATION_JSON))&#10;                .andExpect(jsonPath(&quot;$&quot;, hasSize(1)))&#10;                .andExpect(jsonPath(&quot;$[0].movieName&quot;).value(&quot;Test Movie&quot;));&#10;    }&#10;&#10;    @Test&#10;    void searchMovies_ShouldReturnMatchingMovies() throws Exception {&#10;        movieService.addMovie(testMovie);&#10;&#10;        mockMvc.perform(get(&quot;/api/v1.0/moviebooking/movies/search/{moviename}&quot;, &quot;Test Movie&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(content().contentType(MediaType.APPLICATION_JSON))&#10;                .andExpect(jsonPath(&quot;$&quot;, hasSize(1)))&#10;                .andExpect(jsonPath(&quot;$[0].theatreName&quot;).value(&quot;Test Theatre&quot;));&#10;    }&#10;&#10;    @Test&#10;    void updateTickets_ShouldUpdateMovieTickets() throws Exception {&#10;        Movie savedMovie = movieService.addMovie(testMovie);&#10;&#10;        mockMvc.perform(patch(&quot;/api/v1.0/moviebooking/{moviename}/theatres/{theatre}/tickets&quot;,&#10;                savedMovie.getMovieName(), savedMovie.getTheatreName())&#10;                .param(&quot;total&quot;, &quot;50&quot;)&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.totalTickets&quot;).value(50));&#10;    }&#10;&#10;    @Test&#10;    void updateTickets_ShouldReturn400_WhenInvalidTicketCount() throws Exception {&#10;        Movie savedMovie = movieService.addMovie(testMovie);&#10;&#10;        mockMvc.perform(patch(&quot;/api/v1.0/moviebooking/{moviename}/theatres/{theatre}/tickets&quot;,&#10;                savedMovie.getMovieName(), savedMovie.getTheatreName())&#10;                .param(&quot;total&quot;, &quot;-1&quot;)&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken))&#10;                .andExpect(status().isBadRequest());&#10;    }&#10;&#10;    @Test&#10;    void updateTickets_ShouldReturn400_WhenMovieNotFound() throws Exception {&#10;        mockMvc.perform(patch(&quot;/api/v1.0/moviebooking/{moviename}/theatres/{theatre}/tickets&quot;,&#10;                &quot;NonExistent&quot;, &quot;NonExistent&quot;)&#10;                .param(&quot;total&quot;, &quot;50&quot;)&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken))&#10;                .andExpect(status().isBadRequest());&#10;    }&#10;&#10;    static class LoginRequest {&#10;        private final String loginId;&#10;        private final String password;&#10;&#10;        public LoginRequest(String loginId, String password) {&#10;            this.loginId = loginId;&#10;            this.password = password;&#10;        }&#10;&#10;        public String getLoginId() { return loginId; }&#10;        public String getPassword() { return password; }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.moviebookingapp.controller;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.domain.User;&#10;import com.moviebookingapp.service.MovieService;&#10;import com.moviebookingapp.service.UserService;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import static org.hamcrest.Matchers.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@SpringBootTest&#10;@AutoConfigureMockMvc&#10;@ActiveProfiles(&quot;test&quot;)&#10;@Transactional&#10;class MovieControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    @Autowired&#10;    private MovieService movieService;&#10;&#10;    @Autowired&#10;    private UserService userService;&#10;&#10;    private Movie testMovie;&#10;    private String authToken;&#10;    private static final String TEST_PASSWORD = &quot;Password123!&quot;;&#10;&#10;    @BeforeEach&#10;    void setUp() throws Exception {&#10;        // Create test user and get auth token&#10;        User adminUser = User.builder()&#10;                .firstName(&quot;Admin&quot;)&#10;                .lastName(&quot;User&quot;)&#10;                .email(&quot;admin@test.com&quot;)&#10;                .loginId(&quot;admin&quot;)&#10;                .contactNumber(&quot;1234567890&quot;)&#10;                .build();&#10;        userService.register(adminUser, TEST_PASSWORD, TEST_PASSWORD);&#10;&#10;        // Get auth token&#10;        String response = mockMvc.perform(post(&quot;/api/v1.0/moviebooking/login&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(new LoginRequest(&quot;admin&quot;, TEST_PASSWORD))))&#10;                .andReturn().getResponse().getContentAsString();&#10;        authToken = objectMapper.readTree(response).get(&quot;token&quot;).asText();&#10;&#10;        // Create test movie&#10;        testMovie = Movie.builder()&#10;                .movieName(&quot;Test Movie&quot;)&#10;                .theatreName(&quot;Test Theatre&quot;)&#10;                .totalTickets(100)&#10;                .status(&quot;BOOK ASAP&quot;)&#10;                .build();&#10;    }&#10;&#10;    @Test&#10;    void getAllMovies_ShouldReturnMovies() throws Exception {&#10;        movieService.addMovie(testMovie);&#10;&#10;        mockMvc.perform(get(&quot;/api/v1.0/moviebooking/all&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(content().contentType(MediaType.APPLICATION_JSON))&#10;                .andExpect(jsonPath(&quot;$&quot;, hasSize(1)))&#10;                .andExpect(jsonPath(&quot;$[0].movieName&quot;).value(&quot;Test Movie&quot;));&#10;    }&#10;&#10;    @Test&#10;    void searchMovies_ShouldReturnMatchingMovies() throws Exception {&#10;        movieService.addMovie(testMovie);&#10;&#10;        mockMvc.perform(get(&quot;/api/v1.0/moviebooking/movies/search/{moviename}&quot;, &quot;Test Movie&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(content().contentType(MediaType.APPLICATION_JSON))&#10;                .andExpect(jsonPath(&quot;$&quot;, hasSize(1)))&#10;                .andExpect(jsonPath(&quot;$[0].theatreName&quot;).value(&quot;Test Theatre&quot;));&#10;    }&#10;&#10;    @Test&#10;    void searchMovies_ShouldReturnEmpty_WhenNoMatch() throws Exception {&#10;        mockMvc.perform(get(&quot;/api/v1.0/moviebooking/movies/search/{moviename}&quot;, &quot;Nonexistent&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$&quot;, hasSize(0)));&#10;    }&#10;&#10;    @Test&#10;    void updateTickets_ShouldUpdateMovieTickets() throws Exception {&#10;        Movie savedMovie = movieService.addMovie(testMovie);&#10;&#10;        mockMvc.perform(patch(&quot;/api/v1.0/moviebooking/{moviename}/theatres/{theatre}/tickets&quot;,&#10;                savedMovie.getMovieName(), savedMovie.getTheatreName())&#10;                .param(&quot;total&quot;, &quot;50&quot;)&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.totalTickets&quot;).value(50));&#10;    }&#10;&#10;    @Test&#10;    void updateTickets_ShouldFail_WhenUnauthorized() throws Exception {&#10;        Movie savedMovie = movieService.addMovie(testMovie);&#10;&#10;        mockMvc.perform(patch(&quot;/api/v1.0/moviebooking/{moviename}/theatres/{theatre}/tickets&quot;,&#10;                savedMovie.getMovieName(), savedMovie.getTheatreName())&#10;                .param(&quot;total&quot;, &quot;50&quot;))&#10;                .andExpect(status().isUnauthorized());&#10;    }&#10;&#10;    @Test&#10;    void updateTickets_ShouldFail_WhenInvalidTicketCount() throws Exception {&#10;        Movie savedMovie = movieService.addMovie(testMovie);&#10;&#10;        mockMvc.perform(patch(&quot;/api/v1.0/moviebooking/{moviename}/theatres/{theatre}/tickets&quot;,&#10;                savedMovie.getMovieName(), savedMovie.getTheatreName())&#10;                .param(&quot;total&quot;, &quot;-1&quot;)&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken))&#10;                .andExpect(status().isBadRequest());&#10;    }&#10;&#10;    private static class LoginRequest {&#10;        private final String loginId;&#10;        private final String password;&#10;&#10;        public LoginRequest(String loginId, String password) {&#10;            this.loginId = loginId;&#10;            this.password = password;&#10;        }&#10;&#10;        public String getLoginId() { return loginId; }&#10;        public String getPassword() { return password; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/moviebookingapp/controller/TicketControllerIntegrationTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/moviebookingapp/controller/TicketControllerIntegrationTest.java" />
              <option name="updatedContent" value="package com.moviebookingapp.controller;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.moviebookingapp.config.TestConfig;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.domain.Ticket;&#10;import com.moviebookingapp.repository.MovieRepository;&#10;import com.moviebookingapp.repository.TicketRepository;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.context.annotation.Import;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;&#10;import java.util.List;&#10;&#10;import static org.hamcrest.Matchers.*;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@SpringBootTest&#10;@AutoConfigureMockMvc&#10;@Import(TestConfig.class)&#10;@ActiveProfiles(&quot;test&quot;)&#10;class TicketControllerIntegrationTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Autowired&#10;    private MovieRepository movieRepository;&#10;&#10;    @Autowired&#10;    private TicketRepository ticketRepository;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        ticketRepository.deleteAll();&#10;        movieRepository.deleteAll();&#10;&#10;        // Setup test movie&#10;        Movie movie = Movie.builder()&#10;                .movieName(&quot;Inception&quot;)&#10;                .theatreName(&quot;PVR&quot;)&#10;                .totalTickets(100)&#10;                .status(&quot;BOOK ASAP&quot;)&#10;                .build();&#10;        movieRepository.save(movie);&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldCreateTicket_WhenValidRequest() throws Exception {&#10;        // Given&#10;        TicketController.TicketRequest request = new TicketController.TicketRequest();&#10;        request.setTheatreName(&quot;PVR&quot;);&#10;        request.setNumberOfTickets(2);&#10;        request.setSeatNumbers(List.of(&quot;A1&quot;, &quot;A2&quot;));&#10;        request.setUserLoginId(&quot;user123&quot;);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/{moviename}/add&quot;, &quot;Inception&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(request)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.movieName&quot;, is(&quot;Inception&quot;)))&#10;                .andExpect(jsonPath(&quot;$.theatreName&quot;, is(&quot;PVR&quot;)))&#10;                .andExpect(jsonPath(&quot;$.numberOfTickets&quot;, is(2)))&#10;                .andExpect(jsonPath(&quot;$.seatNumbers&quot;, containsInAnyOrder(&quot;A1&quot;, &quot;A2&quot;)))&#10;                .andExpect(jsonPath(&quot;$.userLoginId&quot;, is(&quot;user123&quot;)));&#10;&#10;        // Verify movie tickets were updated&#10;        Movie updatedMovie = movieRepository.findByMovieNameAndTheatreName(&quot;Inception&quot;, &quot;PVR&quot;).get();&#10;        assert updatedMovie.getTotalTickets() == 98;&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldReturnError_WhenInsufficientTickets() throws Exception {&#10;        // Given&#10;        TicketController.TicketRequest request = new TicketController.TicketRequest();&#10;        request.setTheatreName(&quot;PVR&quot;);&#10;        request.setNumberOfTickets(101); // More than available&#10;        request.setSeatNumbers(List.of(&quot;A1&quot;));&#10;        request.setUserLoginId(&quot;user123&quot;);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/{moviename}/add&quot;, &quot;Inception&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(request)))&#10;                .andExpect(status().isBadRequest());&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldReturnError_WhenMovieNotFound() throws Exception {&#10;        // Given&#10;        TicketController.TicketRequest request = new TicketController.TicketRequest();&#10;        request.setTheatreName(&quot;PVR&quot;);&#10;        request.setNumberOfTickets(2);&#10;        request.setSeatNumbers(List.of(&quot;A1&quot;, &quot;A2&quot;));&#10;        request.setUserLoginId(&quot;user123&quot;);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/{moviename}/add&quot;, &quot;NonExistentMovie&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(request)))&#10;                .andExpect(status().isNotFound());&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldUpdateMovieStatus_WhenLastTicketsBooked() throws Exception {&#10;        // Given&#10;        TicketController.TicketRequest request = new TicketController.TicketRequest();&#10;        request.setTheatreName(&quot;PVR&quot;);&#10;        request.setNumberOfTickets(100); // Book all available tickets&#10;        request.setSeatNumbers(List.of(&quot;A1&quot;));&#10;        request.setUserLoginId(&quot;user123&quot;);&#10;&#10;        // When &amp; Then&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/{moviename}/add&quot;, &quot;Inception&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(request)))&#10;                .andExpect(status().isOk());&#10;&#10;        // Verify movie status was updated&#10;        Movie updatedMovie = movieRepository.findByMovieNameAndTheatreName(&quot;Inception&quot;, &quot;PVR&quot;).get();&#10;        assert updatedMovie.getStatus().equals(&quot;SOLD OUT&quot;);&#10;        assert updatedMovie.getTotalTickets() == 0;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/moviebookingapp/controller/TicketControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/moviebookingapp/controller/TicketControllerTest.java" />
              <option name="originalContent" value="package com.moviebookingapp.controller;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.domain.User;&#10;import com.moviebookingapp.service.MovieService;&#10;import com.moviebookingapp.service.UserService;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.transaction.annotation.Transactional;&#10;import java.util.List;&#10;import java.util.Arrays;&#10;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@SpringBootTest&#10;@AutoConfigureMockMvc&#10;@ActiveProfiles(&quot;test&quot;)&#10;@Transactional&#10;class TicketControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    @Autowired&#10;    private MovieService movieService;&#10;&#10;    @Autowired&#10;    private UserService userService;&#10;&#10;    private Movie testMovie;&#10;    private String authToken;&#10;    private static final String TEST_PASSWORD = &quot;Password123!&quot;;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        // Create test user and get auth token&#10;        User user = User.builder()&#10;                .firstName(&quot;Test&quot;)&#10;                .lastName(&quot;User&quot;)&#10;                .email(&quot;test@example.com&quot;)&#10;                .loginId(&quot;testuser&quot;)&#10;                .contactNumber(&quot;1234567890&quot;)&#10;                .build();&#10;        userService.register(user, TEST_PASSWORD, TEST_PASSWORD);&#10;&#10;        // Create test movie&#10;        testMovie = Movie.builder()&#10;                .movieName(&quot;Test Movie&quot;)&#10;                .theatreName(&quot;Test Theatre&quot;)&#10;                .totalTickets(100)&#10;                .status(&quot;BOOK ASAP&quot;)&#10;                .build();&#10;        movieService.addMovie(testMovie);&#10;&#10;        // Get auth token by logging in&#10;        LoginRequest loginRequest = new LoginRequest(&quot;testuser&quot;, TEST_PASSWORD);&#10;        try {&#10;            String response = mockMvc.perform(post(&quot;/api/v1.0/moviebooking/login&quot;)&#10;                    .contentType(MediaType.APPLICATION_JSON)&#10;                    .content(objectMapper.writeValueAsString(loginRequest)))&#10;                    .andReturn().getResponse().getContentAsString();&#10;            authToken = objectMapper.readTree(response).get(&quot;token&quot;).asText();&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(&quot;Failed to get auth token&quot;, e);&#10;        }&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldCreateTicket_WhenValidRequest() throws Exception {&#10;        TicketRequest request = new TicketRequest();&#10;        request.setTheatreName(testMovie.getTheatreName());&#10;        request.setNumberOfTickets(2);&#10;        request.setSeatNumbers(Arrays.asList(&quot;A1&quot;, &quot;A2&quot;));&#10;        request.setUserLoginId(&quot;testuser&quot;);&#10;&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/{moviename}/add&quot;, testMovie.getMovieName())&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;                .content(objectMapper.writeValueAsString(request)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.movieName&quot;).value(testMovie.getMovieName()))&#10;                .andExpect(jsonPath(&quot;$.numberOfTickets&quot;).value(2));&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldReturn400_WhenInvalidTicketCount() throws Exception {&#10;        TicketRequest request = new TicketRequest();&#10;        request.setTheatreName(testMovie.getTheatreName());&#10;        request.setNumberOfTickets(0); // Invalid count&#10;        request.setSeatNumbers(Arrays.asList(&quot;A1&quot;));&#10;        request.setUserLoginId(&quot;testuser&quot;);&#10;&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/{moviename}/add&quot;, testMovie.getMovieName())&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;                .content(objectMapper.writeValueAsString(request)))&#10;                .andExpect(status().isBadRequest());&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldReturn400_WhenDuplicateSeats() throws Exception {&#10;        TicketRequest request = new TicketRequest();&#10;        request.setTheatreName(testMovie.getTheatreName());&#10;        request.setNumberOfTickets(2);&#10;        request.setSeatNumbers(Arrays.asList(&quot;A1&quot;, &quot;A1&quot;)); // Duplicate seats&#10;        request.setUserLoginId(&quot;testuser&quot;);&#10;&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/{moviename}/add&quot;, testMovie.getMovieName())&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;                .content(objectMapper.writeValueAsString(request)))&#10;                .andExpect(status().isBadRequest());&#10;    }&#10;&#10;    static class TicketRequest {&#10;        private String theatreName;&#10;        private int numberOfTickets;&#10;        private List&lt;String&gt; seatNumbers;&#10;        private String userLoginId;&#10;&#10;        public String getTheatreName() { return theatreName; }&#10;        public void setTheatreName(String theatreName) { this.theatreName = theatreName; }&#10;&#10;        public int getNumberOfTickets() { return numberOfTickets; }&#10;        public void setNumberOfTickets(int numberOfTickets) { this.numberOfTickets = numberOfTickets; }&#10;&#10;        public List&lt;String&gt; getSeatNumbers() { return seatNumbers; }&#10;        public void setSeatNumbers(List&lt;String&gt; seatNumbers) { this.seatNumbers = seatNumbers; }&#10;&#10;        public String getUserLoginId() { return userLoginId; }&#10;        public void setUserLoginId(String userLoginId) { this.userLoginId = userLoginId; }&#10;    }&#10;&#10;    static class LoginRequest {&#10;        private String loginId;&#10;        private String password;&#10;&#10;        public LoginRequest(String loginId, String password) {&#10;            this.loginId = loginId;&#10;            this.password = password;&#10;        }&#10;&#10;        public String getLoginId() { return loginId; }&#10;        public void setLoginId(String loginId) { this.loginId = loginId; }&#10;&#10;        public String getPassword() { return password; }&#10;        public void setPassword(String password) { this.password = password; }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.moviebookingapp.controller;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.domain.User;&#10;import com.moviebookingapp.dto.TicketRequestDTO;&#10;import com.moviebookingapp.service.MovieService;&#10;import com.moviebookingapp.service.UserService;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.Arrays;&#10;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@SpringBootTest&#10;@AutoConfigureMockMvc&#10;@ActiveProfiles(&quot;test&quot;)&#10;@Transactional&#10;class TicketControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    @Autowired&#10;    private MovieService movieService;&#10;&#10;    @Autowired&#10;    private UserService userService;&#10;&#10;    private Movie testMovie;&#10;    private String authToken;&#10;    private static final String TEST_PASSWORD = &quot;Password123!&quot;;&#10;&#10;    @BeforeEach&#10;    void setUp() throws Exception {&#10;        // Create test user&#10;        User user = User.builder()&#10;                .firstName(&quot;Test&quot;)&#10;                .lastName(&quot;User&quot;)&#10;                .email(&quot;test@example.com&quot;)&#10;                .loginId(&quot;testuser&quot;)&#10;                .contactNumber(&quot;1234567890&quot;)&#10;                .build();&#10;        userService.register(user, TEST_PASSWORD, TEST_PASSWORD);&#10;&#10;        // Get auth token&#10;        String response = mockMvc.perform(post(&quot;/api/v1.0/moviebooking/login&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(new LoginRequest(&quot;testuser&quot;, TEST_PASSWORD))))&#10;                .andReturn().getResponse().getContentAsString();&#10;        authToken = objectMapper.readTree(response).get(&quot;token&quot;).asText();&#10;&#10;        // Create test movie&#10;        testMovie = movieService.addMovie(Movie.builder()&#10;                .movieName(&quot;Test Movie&quot;)&#10;                .theatreName(&quot;Test Theatre&quot;)&#10;                .totalTickets(100)&#10;                .status(&quot;BOOK ASAP&quot;)&#10;                .build());&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldSucceed_WhenValidRequest() throws Exception {&#10;        TicketRequestDTO request = new TicketRequestDTO(&#10;            testMovie.getTheatreName(),&#10;            2,&#10;            Arrays.asList(&quot;A1&quot;, &quot;A2&quot;),&#10;            &quot;testuser&quot;&#10;        );&#10;&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/{moviename}/add&quot;, testMovie.getMovieName())&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;                .content(objectMapper.writeValueAsString(request)))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.movieName&quot;).value(testMovie.getMovieName()))&#10;                .andExpect(jsonPath(&quot;$.numberOfTickets&quot;).value(2));&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldFail_WhenUnauthorized() throws Exception {&#10;        TicketRequestDTO request = new TicketRequestDTO(&#10;            testMovie.getTheatreName(),&#10;            2,&#10;            Arrays.asList(&quot;A1&quot;, &quot;A2&quot;),&#10;            &quot;testuser&quot;&#10;        );&#10;&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/{moviename}/add&quot;, testMovie.getMovieName())&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(objectMapper.writeValueAsString(request)))&#10;                .andExpect(status().isUnauthorized());&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldFail_WhenInvalidTicketCount() throws Exception {&#10;        TicketRequestDTO request = new TicketRequestDTO(&#10;            testMovie.getTheatreName(),&#10;            0,&#10;            Arrays.asList(&quot;A1&quot;),&#10;            &quot;testuser&quot;&#10;        );&#10;&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/{moviename}/add&quot;, testMovie.getMovieName())&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;                .content(objectMapper.writeValueAsString(request)))&#10;                .andExpect(status().isBadRequest());&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldFail_WhenDuplicateSeats() throws Exception {&#10;        TicketRequestDTO request = new TicketRequestDTO(&#10;            testMovie.getTheatreName(),&#10;            2,&#10;            Arrays.asList(&quot;A1&quot;, &quot;A1&quot;),&#10;            &quot;testuser&quot;&#10;        );&#10;&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/{moviename}/add&quot;, testMovie.getMovieName())&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;                .content(objectMapper.writeValueAsString(request)))&#10;                .andExpect(status().isBadRequest());&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldFail_WhenMovieNotFound() throws Exception {&#10;        TicketRequestDTO request = new TicketRequestDTO(&#10;            testMovie.getTheatreName(),&#10;            2,&#10;            Arrays.asList(&quot;A1&quot;, &quot;A2&quot;),&#10;            &quot;testuser&quot;&#10;        );&#10;&#10;        mockMvc.perform(post(&quot;/api/v1.0/moviebooking/{moviename}/add&quot;, &quot;NonexistentMovie&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .header(&quot;Authorization&quot;, &quot;Bearer &quot; + authToken)&#10;                .content(objectMapper.writeValueAsString(request)))&#10;                .andExpect(status().isBadRequest());&#10;    }&#10;&#10;    private static class LoginRequest {&#10;        private final String loginId;&#10;        private final String password;&#10;&#10;        public LoginRequest(String loginId, String password) {&#10;            this.loginId = loginId;&#10;            this.password = password;&#10;        }&#10;&#10;        public String getLoginId() { return loginId; }&#10;        public String getPassword() { return password; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/moviebookingapp/service/MovieServiceTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/moviebookingapp/service/MovieServiceTest.java" />
              <option name="originalContent" value="package com.moviebookingapp.service;&#10;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.repository.MovieRepository;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.context.annotation.Import;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;&#10;import static org.assertj.core.api.Assertions.assertThat;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@SpringBootTest&#10;@ActiveProfiles(&quot;test&quot;)&#10;@Transactional&#10;class MovieServiceTest {&#10;&#10;    @Autowired&#10;    private MovieService movieService;&#10;&#10;    @Autowired&#10;    private MovieRepository movieRepository;&#10;&#10;    private Movie testMovie;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        movieRepository.deleteAll();&#10;        testMovie = Movie.builder()&#10;                .movieName(&quot;Test Movie&quot;)&#10;                .theatreName(&quot;Test Theatre&quot;)&#10;                .totalTickets(100)&#10;                .status(&quot;BOOK ASAP&quot;)&#10;                .build();&#10;    }&#10;&#10;    @Test&#10;    void getAllMovies_ShouldReturnEmptyList_WhenNoMovies() {&#10;        List&lt;Movie&gt; result = movieService.getAllMovies();&#10;        assertTrue(result.isEmpty());&#10;    }&#10;&#10;    @Test&#10;    void getAllMovies_ShouldReturnAllMovies_WhenMoviesExist() {&#10;        movieRepository.save(testMovie);&#10;        List&lt;Movie&gt; result = movieService.getAllMovies();&#10;        assertThat(result).hasSize(1);&#10;        assertThat(result.get(0).getMovieName()).isEqualTo(&quot;Test Movie&quot;);&#10;    }&#10;&#10;    @Test&#10;    void searchMovies_ShouldReturnMatchingMovies() {&#10;        movieRepository.save(testMovie);&#10;        List&lt;Movie&gt; result = movieService.searchMovies(&quot;Test Movie&quot;);&#10;        assertThat(result).hasSize(1);&#10;        assertThat(result.get(0).getTheatreName()).isEqualTo(&quot;Test Theatre&quot;);&#10;    }&#10;&#10;    @Test&#10;    void searchMovies_ShouldReturnEmptyList_WhenNoMatches() {&#10;        movieRepository.save(testMovie);&#10;        List&lt;Movie&gt; result = movieService.searchMovies(&quot;Nonexistent Movie&quot;);&#10;        assertTrue(result.isEmpty());&#10;    }&#10;&#10;    @Test&#10;    void updateTotalTickets_ShouldUpdateTickets_WhenMovieExists() {&#10;        Movie savedMovie = movieRepository.save(testMovie);&#10;        Movie updatedMovie = movieService.updateTotalTickets(&#10;            savedMovie.getMovieName(),&#10;            savedMovie.getTheatreName(),&#10;            50&#10;        );&#10;        assertThat(updatedMovie.getTotalTickets()).isEqualTo(50);&#10;    }&#10;&#10;    @Test&#10;    void updateTotalTickets_ShouldUpdateStatus_WhenZeroTickets() {&#10;        Movie savedMovie = movieRepository.save(testMovie);&#10;        Movie updatedMovie = movieService.updateTotalTickets(&#10;            savedMovie.getMovieName(),&#10;            savedMovie.getTheatreName(),&#10;            0&#10;        );&#10;        assertThat(updatedMovie.getTotalTickets()).isEqualTo(0);&#10;        assertThat(updatedMovie.getStatus()).isEqualTo(&quot;SOLD OUT&quot;);&#10;    }&#10;&#10;    @Test&#10;    void bookedCount_ShouldReturnCorrectCount() {&#10;        Movie savedMovie = movieRepository.save(testMovie);&#10;        int initialTotal = savedMovie.getTotalTickets();&#10;        movieService.updateTotalTickets(&#10;            savedMovie.getMovieName(),&#10;            savedMovie.getTheatreName(),&#10;            initialTotal - 20&#10;        );&#10;&#10;        int bookedCount = movieService.bookedCount(&#10;            savedMovie.getMovieName(),&#10;            savedMovie.getTheatreName()&#10;        );&#10;        assertThat(bookedCount).isEqualTo(20);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.moviebookingapp.service;&#10;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.repository.MovieRepository;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;&#10;import static org.assertj.core.api.Assertions.assertThat;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@SpringBootTest&#10;@ActiveProfiles(&quot;test&quot;)&#10;@Transactional&#10;class MovieServiceTest {&#10;&#10;    @Autowired&#10;    private MovieService movieService;&#10;&#10;    @Autowired&#10;    private MovieRepository movieRepository;&#10;&#10;    private Movie testMovie;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        movieRepository.deleteAll();&#10;        testMovie = Movie.builder()&#10;                .movieName(&quot;Test Movie&quot;)&#10;                .theatreName(&quot;Test Theatre&quot;)&#10;                .totalTickets(100)&#10;                .status(&quot;BOOK ASAP&quot;)&#10;                .build();&#10;    }&#10;&#10;    @Test&#10;    void addMovie_ShouldCreateMovie() {&#10;        Movie savedMovie = movieService.addMovie(testMovie);&#10;        assertThat(savedMovie.getId()).isNotNull();&#10;        assertThat(savedMovie.getMovieName()).isEqualTo(&quot;Test Movie&quot;);&#10;        assertThat(savedMovie.getTotalTickets()).isEqualTo(100);&#10;    }&#10;&#10;    @Test&#10;    void addMovie_ShouldThrowException_WhenDuplicate() {&#10;        movieService.addMovie(testMovie);&#10;        Movie duplicate = Movie.builder()&#10;                .movieName(&quot;Test Movie&quot;)&#10;                .theatreName(&quot;Test Theatre&quot;)&#10;                .totalTickets(50)&#10;                .build();&#10;        assertThrows(IllegalArgumentException.class, () -&gt; movieService.addMovie(duplicate));&#10;    }&#10;&#10;    @Test&#10;    void getAllMovies_ShouldReturnEmptyList_WhenNoMovies() {&#10;        List&lt;Movie&gt; result = movieService.getAllMovies();&#10;        assertTrue(result.isEmpty());&#10;    }&#10;&#10;    @Test&#10;    void getAllMovies_ShouldReturnAllMovies() {&#10;        Movie movie1 = movieService.addMovie(testMovie);&#10;        Movie movie2 = movieService.addMovie(Movie.builder()&#10;                .movieName(&quot;Another Movie&quot;)&#10;                .theatreName(&quot;Another Theatre&quot;)&#10;                .totalTickets(50)&#10;                .status(&quot;BOOK ASAP&quot;)&#10;                .build());&#10;&#10;        List&lt;Movie&gt; result = movieService.getAllMovies();&#10;        assertThat(result).hasSize(2);&#10;        assertThat(result).extracting(&quot;movieName&quot;)&#10;                .containsExactlyInAnyOrder(&quot;Test Movie&quot;, &quot;Another Movie&quot;);&#10;    }&#10;&#10;    @Test&#10;    void searchMovies_ShouldReturnMatchingMovies() {&#10;        movieService.addMovie(testMovie);&#10;        movieService.addMovie(Movie.builder()&#10;                .movieName(&quot;Test Movie&quot;)&#10;                .theatreName(&quot;Another Theatre&quot;)&#10;                .totalTickets(50)&#10;                .status(&quot;BOOK ASAP&quot;)&#10;                .build());&#10;&#10;        List&lt;Movie&gt; result = movieService.searchMovies(&quot;Test Movie&quot;);&#10;        assertThat(result).hasSize(2);&#10;        assertThat(result).allSatisfy(movie -&gt;&#10;            assertThat(movie.getMovieName()).isEqualTo(&quot;Test Movie&quot;)&#10;        );&#10;    }&#10;&#10;    @Test&#10;    void updateTotalTickets_ShouldUpdateTickets() {&#10;        Movie savedMovie = movieService.addMovie(testMovie);&#10;        Movie updated = movieService.updateTotalTickets(&#10;            savedMovie.getMovieName(),&#10;            savedMovie.getTheatreName(),&#10;            50&#10;        );&#10;        assertThat(updated.getTotalTickets()).isEqualTo(50);&#10;    }&#10;&#10;    @Test&#10;    void updateTotalTickets_ShouldUpdateStatus_WhenZeroTickets() {&#10;        Movie savedMovie = movieService.addMovie(testMovie);&#10;        Movie updated = movieService.updateTotalTickets(&#10;            savedMovie.getMovieName(),&#10;            savedMovie.getTheatreName(),&#10;            0&#10;        );&#10;        assertThat(updated.getTotalTickets()).isEqualTo(0);&#10;        assertThat(updated.getStatus()).isEqualTo(&quot;SOLD OUT&quot;);&#10;    }&#10;&#10;    @Test&#10;    void bookedCount_ShouldCalculateCorrectly() {&#10;        Movie savedMovie = movieService.addMovie(testMovie);&#10;        movieService.updateTotalTickets(&#10;            savedMovie.getMovieName(),&#10;            savedMovie.getTheatreName(),&#10;            80  // 20 tickets booked&#10;        );&#10;&#10;        int booked = movieService.bookedCount(&#10;            savedMovie.getMovieName(),&#10;            savedMovie.getTheatreName()&#10;        );&#10;        assertThat(booked).isEqualTo(20);&#10;    }&#10;&#10;    @Test&#10;    void deleteMovie_ShouldRemoveMovie() {&#10;        Movie savedMovie = movieService.addMovie(testMovie);&#10;        movieService.deleteMovie(savedMovie.getMovieName(), savedMovie.getTheatreName());&#10;&#10;        List&lt;Movie&gt; allMovies = movieService.getAllMovies();&#10;        assertThat(allMovies).isEmpty();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/moviebookingapp/service/TicketServiceIntegrationTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/moviebookingapp/service/TicketServiceIntegrationTest.java" />
              <option name="updatedContent" value="package com.moviebookingapp.service;&#10;&#10;import com.moviebookingapp.config.TestConfig;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.domain.Ticket;&#10;import com.moviebookingapp.repository.MovieRepository;&#10;import com.moviebookingapp.repository.TicketRepository;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.context.annotation.Import;&#10;import org.springframework.test.context.ActiveProfiles;&#10;&#10;import java.util.List;&#10;&#10;import static org.assertj.core.api.Assertions.assertThat;&#10;import static org.junit.jupiter.api.Assertions.assertThrows;&#10;&#10;@SpringBootTest&#10;@Import(TestConfig.class)&#10;@ActiveProfiles(&quot;test&quot;)&#10;class TicketServiceIntegrationTest {&#10;&#10;    @Autowired&#10;    private TicketService ticketService;&#10;&#10;    @Autowired&#10;    private TicketRepository ticketRepository;&#10;&#10;    @Autowired&#10;    private MovieRepository movieRepository;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        ticketRepository.deleteAll();&#10;        movieRepository.deleteAll();&#10;        &#10;        // Setup test movie&#10;        Movie movie = Movie.builder()&#10;                .movieName(&quot;Inception&quot;)&#10;                .theatreName(&quot;PVR&quot;)&#10;                .totalTickets(100)&#10;                .status(&quot;BOOK ASAP&quot;)&#10;                .build();&#10;        movieRepository.save(movie);&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldCreateTicket_WhenTicketsAvailable() {&#10;        // Given&#10;        Ticket ticket = Ticket.builder()&#10;                .movieName(&quot;Inception&quot;)&#10;                .theatreName(&quot;PVR&quot;)&#10;                .numberOfTickets(2)&#10;                .seatNumbers(List.of(&quot;A1&quot;, &quot;A2&quot;))&#10;                .userLoginId(&quot;user123&quot;)&#10;                .build();&#10;&#10;        // When&#10;        Ticket bookedTicket = ticketService.bookTicket(ticket);&#10;&#10;        // Then&#10;        assertThat(bookedTicket.getId()).isNotNull();&#10;        assertThat(bookedTicket.getMovieName()).isEqualTo(&quot;Inception&quot;);&#10;        assertThat(bookedTicket.getNumberOfTickets()).isEqualTo(2);&#10;        &#10;        // Verify movie tickets were updated&#10;        Movie updatedMovie = movieRepository.findByMovieNameAndTheatreName(&quot;Inception&quot;, &quot;PVR&quot;).get();&#10;        assertThat(updatedMovie.getTotalTickets()).isEqualTo(98);&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldThrowException_WhenInsufficientTickets() {&#10;        // Given&#10;        Ticket ticket = Ticket.builder()&#10;                .movieName(&quot;Inception&quot;)&#10;                .theatreName(&quot;PVR&quot;)&#10;                .numberOfTickets(101)  // More than available&#10;                .seatNumbers(List.of(&quot;A1&quot;))&#10;                .userLoginId(&quot;user123&quot;)&#10;                .build();&#10;&#10;        // When &amp; Then&#10;        assertThrows(IllegalArgumentException.class, () -&gt; ticketService.bookTicket(ticket));&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldUpdateMovieStatus_WhenLastTicketsBooked() {&#10;        // Given&#10;        Ticket ticket = Ticket.builder()&#10;                .movieName(&quot;Inception&quot;)&#10;                .theatreName(&quot;PVR&quot;)&#10;                .numberOfTickets(100)  // Book all tickets&#10;                .seatNumbers(List.of(&quot;A1&quot;))&#10;                .userLoginId(&quot;user123&quot;)&#10;                .build();&#10;&#10;        // When&#10;        ticketService.bookTicket(ticket);&#10;&#10;        // Then&#10;        Movie movie = movieRepository.findByMovieNameAndTheatreName(&quot;Inception&quot;, &quot;PVR&quot;).get();&#10;        assertThat(movie.getStatus()).isEqualTo(&quot;SOLD OUT&quot;);&#10;        assertThat(movie.getTotalTickets()).isEqualTo(0);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/moviebookingapp/service/TicketServiceTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/moviebookingapp/service/TicketServiceTest.java" />
              <option name="originalContent" value="package com.moviebookingapp.service;&#10;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.domain.Ticket;&#10;import com.moviebookingapp.repository.MovieRepository;&#10;import com.moviebookingapp.repository.TicketRepository;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.Arrays;&#10;import java.util.HashSet;&#10;&#10;import static org.assertj.core.api.Assertions.assertThat;&#10;import static org.junit.jupiter.api.Assertions.assertThrows;&#10;&#10;@SpringBootTest&#10;@ActiveProfiles(&quot;test&quot;)&#10;@Transactional&#10;class TicketServiceTest {&#10;&#10;    @Autowired&#10;    private TicketService ticketService;&#10;&#10;    @Autowired&#10;    private MovieService movieService;&#10;&#10;    @Autowired&#10;    private TicketRepository ticketRepository;&#10;&#10;    @Autowired&#10;    private MovieRepository movieRepository;&#10;&#10;    private Movie testMovie;&#10;    private Ticket testTicket;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        ticketRepository.deleteAll();&#10;        movieRepository.deleteAll();&#10;&#10;        testMovie = movieRepository.save(Movie.builder()&#10;                .movieName(&quot;Test Movie&quot;)&#10;                .theatreName(&quot;Test Theatre&quot;)&#10;                .totalTickets(100)&#10;                .status(&quot;BOOK ASAP&quot;)&#10;                .build());&#10;&#10;        testTicket = Ticket.builder()&#10;                .movieName(testMovie.getMovieName())&#10;                .theatreName(testMovie.getTheatreName())&#10;                .numberOfTickets(2)&#10;                .seatNumbers(Arrays.asList(&quot;A1&quot;, &quot;A2&quot;))&#10;                .userLoginId(&quot;testUser&quot;)&#10;                .build();&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldCreateTicket_WhenTicketsAvailable() {&#10;        // When&#10;        Ticket bookedTicket = ticketService.bookTicket(testTicket);&#10;&#10;        // Then&#10;        assertThat(bookedTicket.getId()).isNotNull();&#10;        assertThat(bookedTicket.getMovieName()).isEqualTo(testMovie.getMovieName());&#10;        assertThat(bookedTicket.getNumberOfTickets()).isEqualTo(2);&#10;&#10;        // Verify movie tickets were updated&#10;        Movie updatedMovie = movieRepository.findByMovieNameAndTheatreName(&#10;            testMovie.getMovieName(),&#10;            testMovie.getTheatreName()&#10;        ).orElseThrow();&#10;        assertThat(updatedMovie.getTotalTickets()).isEqualTo(98);&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldUpdateMovieStatus_WhenLastTicketsBooked() {&#10;        // Given&#10;        testTicket.setNumberOfTickets(100); // Book all available tickets&#10;&#10;        // When&#10;        ticketService.bookTicket(testTicket);&#10;&#10;        // Then&#10;        Movie movie = movieRepository.findByMovieNameAndTheatreName(&#10;            testMovie.getMovieName(),&#10;            testMovie.getTheatreName()&#10;        ).orElseThrow();&#10;&#10;        assertThat(movie.getTotalTickets()).isEqualTo(0);&#10;        assertThat(movie.getStatus()).isEqualTo(&quot;SOLD OUT&quot;);&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldThrowException_WhenInsufficientTickets() {&#10;        testTicket.setNumberOfTickets(101); // More than available&#10;        assertThrows(IllegalArgumentException.class, () -&gt;&#10;            ticketService.bookTicket(testTicket)&#10;        );&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldThrowException_WhenDuplicateSeats() {&#10;        testTicket.setSeatNumbers(Arrays.asList(&quot;A1&quot;, &quot;A1&quot;)); // Duplicate seats&#10;        assertThrows(IllegalArgumentException.class, () -&gt;&#10;            ticketService.bookTicket(testTicket)&#10;        );&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldThrowException_WhenSeatCountMismatch() {&#10;        testTicket.setSeatNumbers(Arrays.asList(&quot;A1&quot;, &quot;A2&quot;, &quot;A3&quot;)); // More seats than tickets&#10;        testTicket.setNumberOfTickets(2);&#10;        assertThrows(IllegalArgumentException.class, () -&gt;&#10;            ticketService.bookTicket(testTicket)&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.moviebookingapp.service;&#10;&#10;import com.moviebookingapp.domain.Movie;&#10;import com.moviebookingapp.domain.Ticket;&#10;import com.moviebookingapp.repository.MovieRepository;&#10;import com.moviebookingapp.repository.TicketRepository;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;import static org.assertj.core.api.Assertions.assertThat;&#10;import static org.junit.jupiter.api.Assertions.assertThrows;&#10;&#10;@SpringBootTest&#10;@ActiveProfiles(&quot;test&quot;)&#10;@Transactional&#10;class TicketServiceTest {&#10;&#10;    @Autowired&#10;    private TicketService ticketService;&#10;&#10;    @Autowired&#10;    private MovieService movieService;&#10;&#10;    @Autowired&#10;    private TicketRepository ticketRepository;&#10;&#10;    private Movie testMovie;&#10;    private Ticket testTicket;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        ticketRepository.deleteAll();&#10;        testMovie = movieService.addMovie(Movie.builder()&#10;                .movieName(&quot;Test Movie&quot;)&#10;                .theatreName(&quot;Test Theatre&quot;)&#10;                .totalTickets(100)&#10;                .status(&quot;BOOK ASAP&quot;)&#10;                .build());&#10;&#10;        testTicket = Ticket.builder()&#10;                .movieName(testMovie.getMovieName())&#10;                .theatreName(testMovie.getTheatreName())&#10;                .numberOfTickets(2)&#10;                .seatNumbers(Arrays.asList(&quot;A1&quot;, &quot;A2&quot;))&#10;                .userLoginId(&quot;testuser&quot;)&#10;                .build();&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldSucceed_WhenValidRequest() {&#10;        Ticket bookedTicket = ticketService.bookTicket(testTicket);&#10;&#10;        assertThat(bookedTicket.getId()).isNotNull();&#10;        assertThat(bookedTicket.getMovieName()).isEqualTo(testMovie.getMovieName());&#10;        assertThat(bookedTicket.getNumberOfTickets()).isEqualTo(2);&#10;        assertThat(bookedTicket.getSeatNumbers()).containsExactly(&quot;A1&quot;, &quot;A2&quot;);&#10;&#10;        Movie updatedMovie = movieService.searchMovies(testMovie.getMovieName()).get(0);&#10;        assertThat(updatedMovie.getTotalTickets()).isEqualTo(98);&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldFail_WhenInsufficientTickets() {&#10;        testTicket.setNumberOfTickets(101);&#10;&#10;        assertThrows(IllegalArgumentException.class, () -&gt;&#10;            ticketService.bookTicket(testTicket)&#10;        );&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldUpdateMovieStatus_WhenLastTickets() {&#10;        testTicket.setNumberOfTickets(100);&#10;        testTicket.setSeatNumbers(generateSeatNumbers(100));&#10;&#10;        ticketService.bookTicket(testTicket);&#10;&#10;        Movie updatedMovie = movieService.searchMovies(testMovie.getMovieName()).get(0);&#10;        assertThat(updatedMovie.getStatus()).isEqualTo(&quot;SOLD OUT&quot;);&#10;        assertThat(updatedMovie.getTotalTickets()).isEqualTo(0);&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldFail_WhenMovieNotFound() {&#10;        testTicket.setMovieName(&quot;Nonexistent Movie&quot;);&#10;&#10;        assertThrows(IllegalArgumentException.class, () -&gt;&#10;            ticketService.bookTicket(testTicket)&#10;        );&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldFail_WhenDuplicateSeats() {&#10;        testTicket.setSeatNumbers(Arrays.asList(&quot;A1&quot;, &quot;A1&quot;));&#10;&#10;        assertThrows(IllegalArgumentException.class, () -&gt;&#10;            ticketService.bookTicket(testTicket)&#10;        );&#10;    }&#10;&#10;    @Test&#10;    void bookTicket_ShouldFail_WhenSeatCountMismatch() {&#10;        testTicket.setSeatNumbers(Arrays.asList(&quot;A1&quot;, &quot;A2&quot;, &quot;A3&quot;));&#10;        testTicket.setNumberOfTickets(2);&#10;&#10;        assertThrows(IllegalArgumentException.class, () -&gt;&#10;            ticketService.bookTicket(testTicket)&#10;        );&#10;    }&#10;&#10;    private List&lt;String&gt; generateSeatNumbers(int count) {&#10;        String[] seats = new String[count];&#10;        for (int i = 0; i &lt; count; i++) {&#10;            seats[i] = String.format(&quot;A%d&quot;, i + 1);&#10;        }&#10;        return Arrays.asList(seats);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/moviebookingapp/service/UserServiceTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/moviebookingapp/service/UserServiceTest.java" />
              <option name="originalContent" value="package com.moviebookingapp.service;&#10;&#10;import com.moviebookingapp.domain.User;&#10;import com.moviebookingapp.repository.UserRepository;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.context.annotation.Import;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import static org.assertj.core.api.Assertions.assertThat;&#10;import static org.junit.jupiter.api.Assertions.assertThrows;&#10;&#10;@SpringBootTest&#10;@ActiveProfiles(&quot;test&quot;)&#10;@Transactional&#10;class UserServiceTest {&#10;&#10;    @Autowired&#10;    private UserService userService;&#10;&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;&#10;    @Autowired&#10;    private PasswordEncoder passwordEncoder;&#10;&#10;    private User testUser;&#10;    private static final String TEST_PASSWORD = &quot;Password123!&quot;;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        userRepository.deleteAll();&#10;        testUser = User.builder()&#10;                .firstName(&quot;Test&quot;)&#10;                .lastName(&quot;User&quot;)&#10;                .email(&quot;test@example.com&quot;)&#10;                .loginId(&quot;testuser&quot;)&#10;                .contactNumber(&quot;1234567890&quot;)&#10;                .build();&#10;    }&#10;&#10;    @Test&#10;    void register_ShouldCreateUser() {&#10;        User registeredUser = userService.register(testUser, TEST_PASSWORD, TEST_PASSWORD);&#10;        assertThat(registeredUser.getId()).isNotNull();&#10;        assertThat(registeredUser.getLoginId()).isEqualTo(&quot;testuser&quot;);&#10;        assertThat(passwordEncoder.matches(TEST_PASSWORD, registeredUser.getPasswordHash())).isTrue();&#10;    }&#10;&#10;    @Test&#10;    void register_ShouldThrowException_WhenLoginIdExists() {&#10;        userService.register(testUser, TEST_PASSWORD, TEST_PASSWORD);&#10;&#10;        User duplicateUser = User.builder()&#10;                .firstName(&quot;Another&quot;)&#10;                .lastName(&quot;User&quot;)&#10;                .email(&quot;another@example.com&quot;)&#10;                .loginId(&quot;testuser&quot;)&#10;                .contactNumber(&quot;0987654321&quot;)&#10;                .build();&#10;&#10;        assertThrows(IllegalArgumentException.class, () -&gt;&#10;            userService.register(duplicateUser, TEST_PASSWORD, TEST_PASSWORD)&#10;        );&#10;    }&#10;&#10;    @Test&#10;    void register_ShouldThrowException_WhenPasswordsDontMatch() {&#10;        assertThrows(IllegalArgumentException.class, () -&gt;&#10;            userService.register(testUser, TEST_PASSWORD, &quot;DifferentPassword123!&quot;)&#10;        );&#10;    }&#10;&#10;    @Test&#10;    void authenticate_ShouldReturnTrue_WhenValidCredentials() {&#10;        userService.register(testUser, TEST_PASSWORD, TEST_PASSWORD);&#10;        assertThat(userService.login(testUser.getLoginId(), TEST_PASSWORD)).isTrue();&#10;    }&#10;&#10;    @Test&#10;    void changePassword_ShouldUpdatePassword() {&#10;        User savedUser = userService.register(testUser, TEST_PASSWORD, TEST_PASSWORD);&#10;        String newPassword = &quot;NewPassword123!&quot;;&#10;&#10;        userService.resetPassword(savedUser.getLoginId(), savedUser.getPasswordHash(), newPassword, newPassword);&#10;&#10;        assertThat(userService.login(savedUser.getLoginId(), newPassword)).isTrue();&#10;    }&#10;&#10;    @Test&#10;    void changePassword_ShouldThrowException_WhenPasswordsDontMatch() {&#10;        User savedUser = userService.register(testUser, TEST_PASSWORD, TEST_PASSWORD);&#10;&#10;        assertThrows(IllegalArgumentException.class, () -&gt;&#10;            userService.resetPassword(savedUser.getLoginId(), &quot;NewPassword123!&quot;, &quot;DifferentPassword123!&quot;, &quot;DifferentPassword123!&quot;)&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.moviebookingapp.service;&#10;&#10;import com.moviebookingapp.domain.User;&#10;import com.moviebookingapp.repository.UserRepository;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import static org.assertj.core.api.Assertions.assertThat;&#10;import static org.junit.jupiter.api.Assertions.assertThrows;&#10;&#10;@SpringBootTest&#10;@ActiveProfiles(&quot;test&quot;)&#10;@Transactional&#10;class UserServiceTest {&#10;&#10;    @Autowired&#10;    private UserService userService;&#10;&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;&#10;    @Autowired&#10;    private PasswordEncoder passwordEncoder;&#10;&#10;    private User testUser;&#10;    private static final String TEST_PASSWORD = &quot;Password123!&quot;;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        userRepository.deleteAll();&#10;        testUser = User.builder()&#10;                .firstName(&quot;Test&quot;)&#10;                .lastName(&quot;User&quot;)&#10;                .email(&quot;test@example.com&quot;)&#10;                .loginId(&quot;testuser&quot;)&#10;                .contactNumber(&quot;1234567890&quot;)&#10;                .build();&#10;    }&#10;&#10;    @Test&#10;    void register_ShouldCreateUser_WhenValidData() {&#10;        User registeredUser = userService.register(testUser, TEST_PASSWORD, TEST_PASSWORD);&#10;&#10;        assertThat(registeredUser.getId()).isNotNull();&#10;        assertThat(registeredUser.getLoginId()).isEqualTo(&quot;testuser&quot;);&#10;        assertThat(passwordEncoder.matches(TEST_PASSWORD, registeredUser.getPasswordHash())).isTrue();&#10;    }&#10;&#10;    @Test&#10;    void register_ShouldFail_WhenPasswordsDontMatch() {&#10;        assertThrows(IllegalArgumentException.class, () -&gt;&#10;            userService.register(testUser, TEST_PASSWORD, &quot;DifferentPassword123!&quot;)&#10;        );&#10;    }&#10;&#10;    @Test&#10;    void register_ShouldFail_WhenLoginIdExists() {&#10;        userService.register(testUser, TEST_PASSWORD, TEST_PASSWORD);&#10;&#10;        User duplicateUser = User.builder()&#10;                .firstName(&quot;Another&quot;)&#10;                .lastName(&quot;User&quot;)&#10;                .email(&quot;another@example.com&quot;)&#10;                .loginId(&quot;testuser&quot;)&#10;                .contactNumber(&quot;9876543210&quot;)&#10;                .build();&#10;&#10;        assertThrows(IllegalArgumentException.class, () -&gt;&#10;            userService.register(duplicateUser, TEST_PASSWORD, TEST_PASSWORD)&#10;        );&#10;    }&#10;&#10;    @Test&#10;    void authenticate_ShouldSucceed_WhenValidCredentials() {&#10;        userService.register(testUser, TEST_PASSWORD, TEST_PASSWORD);&#10;&#10;        boolean result = userService.authenticate(testUser.getLoginId(), TEST_PASSWORD);&#10;        assertThat(result).isTrue();&#10;    }&#10;&#10;    @Test&#10;    void authenticate_ShouldFail_WhenInvalidPassword() {&#10;        userService.register(testUser, TEST_PASSWORD, TEST_PASSWORD);&#10;&#10;        boolean result = userService.authenticate(testUser.getLoginId(), &quot;WrongPassword123!&quot;);&#10;        assertThat(result).isFalse();&#10;    }&#10;&#10;    @Test&#10;    void authenticate_ShouldFail_WhenUserNotFound() {&#10;        boolean result = userService.authenticate(&quot;nonexistent&quot;, TEST_PASSWORD);&#10;        assertThat(result).isFalse();&#10;    }&#10;&#10;    @Test&#10;    void changePassword_ShouldSucceed_WhenValidRequest() {&#10;        User savedUser = userService.register(testUser, TEST_PASSWORD, TEST_PASSWORD);&#10;        String newPassword = &quot;NewPassword123!&quot;;&#10;&#10;        userService.changePassword(savedUser.getLoginId(), newPassword, newPassword);&#10;&#10;        boolean canAuthenticateWithNewPassword = userService.authenticate(savedUser.getLoginId(), newPassword);&#10;        boolean cannotAuthenticateWithOldPassword = !userService.authenticate(savedUser.getLoginId(), TEST_PASSWORD);&#10;&#10;        assertThat(canAuthenticateWithNewPassword).isTrue();&#10;        assertThat(cannotAuthenticateWithOldPassword).isTrue();&#10;    }&#10;&#10;    @Test&#10;    void changePassword_ShouldFail_WhenPasswordsDontMatch() {&#10;        User savedUser = userService.register(testUser, TEST_PASSWORD, TEST_PASSWORD);&#10;&#10;        assertThrows(IllegalArgumentException.class, () -&gt;&#10;            userService.changePassword(savedUser.getLoginId(), &quot;NewPassword123!&quot;, &quot;DifferentPassword123!&quot;)&#10;        );&#10;    }&#10;&#10;    @Test&#10;    void changePassword_ShouldFail_WhenUserNotFound() {&#10;        assertThrows(IllegalArgumentException.class, () -&gt;&#10;            userService.changePassword(&quot;nonexistent&quot;, TEST_PASSWORD, TEST_PASSWORD)&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/resources/application-test.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/resources/application-test.yml" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="spring:&#10;  datasource:&#10;    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;MODE=MySQL&#10;    username: sa&#10;    password: &#10;    driver-class-name: org.h2.Driver&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: create-drop&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.H2Dialect&#10;        format_sql: true&#10;  kafka:&#10;    bootstrap-servers: ${spring.embedded.kafka.brokers}&#10;    consumer:&#10;      auto-offset-reset: earliest&#10;      group-id: test-group&#10;&#10;security:&#10;  jwt:&#10;    secret: testsecretkeytestsecretkeytestsecretkeytestsecretkey&#10;    expiration: 3600000&#10;&#10;logging:&#10;  level:&#10;    root: WARN&#10;    org.springframework.kafka: WARN&#10;    org.apache.kafka: WARN" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>